'use strict';
const utils = require('./utils');
const Script = require('./script');

module.exports.compile = (key, vX, timestamp, script) => [
	`({`,
		`${JSON.stringify(key)}: function(context, functions, renamed, next) { // ${vX}, key: ${key}, timestamp: ${timestamp}`,
            script,
		`}`,
	`})`
];

module.exports.sourceString = (scriptKey, key) => [
	`exec.key([`,
		scriptKey,
		`next => {`,
			`utils.intrinsic.filter[${JSON.stringify(key)}](context, utils.intrinsic.filter[${JSON.stringify(key)}].functions, renamed, next);`,
		`},`,
	`], next);`

];

module.exports.sourceKeep = (scriptKey, scriptMore) => [
	`exec.key([`,
		scriptKey,
		scriptMore,
	`], next);`
];

module.exports.sourceKey = (scriptKey) => [
	`next => exec.$key(context, (context, next) => {`,
	    scriptKey,
	`}, next),`,
];

module.exports.sourceScope = (scope, functions) => [
	utils.isFunction(scope) ? 
		`next => exec.scopeFunc(context, functions[${utils.pushReturnLength(functions, scope)}], next),` :
		`next => exec.scope(context, ${utils.jsformat(scope)}, next),`,
];

module.exports.sourceInsert = (insert, functions) => [
	utils.isFunction(insert) ? 
		`next => exec.insertFunc(context, functions[${utils.pushReturnLength(functions, insert)}], next),` :
		`next => exec.insert(context, ${utils.jsformat(insert)}, next),`,
];

module.exports.sourceDefault = (_default, functions) => [
	utils.isFunction(_default) ? 
		`next => exec.defaultFunc(context, functions[${utils.pushReturnLength(functions, _default)}], next),` :
		`next => exec.default(context, ${utils.jsformat(_default)}, next),`
];

module.exports.sourceOptional = (optional, functions) => [
	utils.isFunction(optional) ? 
		`next => exec.optionalFunc(context, functions[${utils.pushReturnLength(functions, optional)}], next),` :
		`next => exec.optional(context, ${utils.jsformat(optional)}, next),`
];

module.exports.map = (map, functions) => [
	utils.isFunction(map) ?
		`next => exec.mapFunc(context, functions[${utils.pushReturnLength(functions, map)}], next),` :
		`next => exec.map(context, ${utils.jsformat(map)}, next),`
];

module.exports.message = (message, functions) => [
	utils.isFunction(message) ?
		`next => exec.messageFunc(context, functions[${utils.pushReturnLength(functions, message)}], next),` :
		`next => exec.message(context, '${message}', next),` 
];

module.exports.assert = (modifiers, modifier, functions) => [
	utils.isFunction(modifiers[modifier]) ?
		`next => exec.${modifier.substring(1)}Func(context, functions[${utils.pushReturnLength(functions, modifiers[modifier])}], next),` :
		`next => exec.${modifier.substring(1)}(context, ${utils.jsformat(modifiers[modifier])}, next),`
];

module.exports.convertToObject = (toObject, functions) => [
	utils.isFunction(toObject) ?
		`next => exec.toObjectFunc(context, functions[${utils.pushReturnLength(functions, toObject)}], next),` :
		`next => exec.toObject(context, ${utils.jsformat(toObject)}, next),`
];

module.exports.convertToArray = (toArray, functions) => [
	utils.isFunction(toArray) ?
		`next => exec.toArrayFunc(context, functions[${utils.pushReturnLength(functions, toArray)}], next),` :
		`next => exec.toArray(context, ${utils.jsformat(toArray)}, next),`
];

module.exports.targetRemove = (remove, functions) => [
	utils.isFunction(remove) ?
		`next => exec.removeFunc(context, functions[${utils.pushReturnLength(functions, remove)}], next),` :
		remove ? 
			`next => exec.remove(context, next),` : 
			undefined
];

module.exports.anyWrapper = (scriptTypes) => [
	`exec.any(context, [`,	
		...scriptTypes,
	`], next);`
];

module.exports.anyType = (scriptType) => [
	`next => exec.anyOption(context, next => {`,
		scriptType,
	`}, next),`
];

module.exports.switchWrapper = (scriptTypes) => [
	`exec.switch([`,	
		...scriptTypes,
	`], next);`
];

module.exports.switchType = (scriptType) => [
	`next => exec.switchOption(next => {`,
		scriptType,
	`}, next),`
];

module.exports.shell = (filter, script, transform, final, functions) => [
	`exec.series([ // functions`,
		...(filter ? [ 
			`next => { // filter`,
				`exec.function(context, functions[${utils.pushReturnLength(functions, filter)}], '$filter', (err, keep) => { if (err) return next(err);`, 
					`next(keep !== undefined && !keep ? true : null);`, // skip if keep == false
				`});`,
			`},`,
		] : [ 
		]),
			`next => { // entry`, 
				script,
			`},`,
		...(transform ? [
			`next => { // transform`,
				`if (context.rename === '$key')        return exec.function(context,         functions[${utils.pushReturnLength(functions, transform)}], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));`,
				`if (context.rename in context.target) return exec.function(context.shift(), functions[${utils.pushReturnLength(functions, transform)}], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));`,
//				`if (context.rename in context.target || context.rename === '$key') return exec.function(context.shift(), functions[${utils.pushReturnLength(functions, transform)}], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));`,
				`next();`,
//				`if (! (context.rename in context.target)) return next();`,
//				`exec.function(context.shift(), functions[${utils.pushReturnLength(functions, transform)}], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));`,
			`},`,
		] : [
		]),
		...(final ? [ 
			`next => { // final`,
				`exec.function(context, functions[${utils.pushReturnLength(functions, final)}], '$final', (err) => { if (err) return next(err);`,
					`next();`,
				`});`,
			`},`,
		] : [ 
		]),
	`], next);` 
];

module.exports.objectKeys = (keys, scriptEntry) => [
	`next => exec.keys(context, ${utils.jsformat(keys)}, keys, (context, next) => { // object entries`,
		scriptEntry,
	`}, next)`
];

const renamed = (rename, functions) => [ 
	rename ? 
		utils.isFunction(rename) ? 
			`next => exec.renameFunc(context, renamed, functions[${utils.pushReturnLength(functions, rename)}], next),` :
			`next => exec.rename(context, renamed, ${utils.jsformat(rename)}, next),` :
		undefined
]

module.exports.objectWrapper = (rename, functions, parallel, scriptKeys, scriptExcessive) => [
	...renamed(rename, functions),
	`next => exec.object(context, (keys, renamed, next) => {`,
		scriptKeys.isEmpty() ? 
		new Script(scriptExcessive, 0, `;`) : 
		new Script(
			`exec.object${parallel ? 'Parallel' : 'Series'}([ // entries`,
				scriptKeys, 
			`], err => `, 0, scriptExcessive, 0, `);` // 0's concat line
		),
	`}, next),`,
];

module.exports.objectRest = (scriptKeys, scriptRest) => [
	`exec.rest(`, 0, scriptKeys.isEmpty() ? `null` : `err`, 0, `, context, keys, (context, next) => { // object entries`,
		scriptRest,
	`}, next)`
];

module.exports.objectExcessive = (scriptKeys) => [
	`exec.excessive(`, 0, scriptKeys.isEmpty() ? `null` : `err`, 0, `, context, keys, renamed, next)`  
];

module.exports.array = (rename, functions, parallel, scriptEntry) => [
	...renamed(rename, functions),
	`next => exec.array(context, next => {`, 
		`exec.array${parallel ? 'Parallel' : 'Series'}(context, (index, next) => { // array entries`,
			`exec.index(context, index, (context, next) => {`, 
				scriptEntry,
			`}, next)`,
		`}, next)`,
	`}, next),`,
];

module.exports.functionType = (filter) => [
	[ Boolean, Number, String, RegExp, Date, Function, Array, Object ].includes(filter) ?
		`next => exec.type(context, ${filter.name}, next),` :
		`next => exec.typeName(context, '${filter.name}', next),`
];

module.exports.functionAssign = (rename, functions) => [
	...renamed(rename, functions),
	`next => exec.assign(context, next),`,
];
