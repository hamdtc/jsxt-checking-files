'use strict';
// jsxl-filters compiled with jsxl-filters on Tue Apr 18 2023 22:39:54 GMT+0530 (India Standard Time)
const format = require('util').format;
const async = require('async');
const utils = require('./utils');
const exec = require('./exec');
const Context = require('./context');
const compiler2 = require('./compiler2');
const filter = module.exports.filter = {};
module.exports.state = 4;

Object.assign(filter, { "Type1{}":
	function(context, functions, renamed, next) { // v1, key: Type1{}, timestamp: 1681837793362
		exec.any(context, [
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, false, next),
					next => exec.type(context, Array, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, false, next),
					next => exec.type(context, Object, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, false, next),
					next => exec.type(context, String, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.series([ // functions
					next => { // entry
						exec.key([
							next => exec.optional(context, false, next),
							next => exec.type(context, Function, next),
							next => exec.assign(context, next),
						], next);
					},
					next => { // transform
						if (context.rename === '$key')        return exec.function(context,         functions[0], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						if (context.rename in context.target) return exec.function(context.shift(), functions[1], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						next();
					},
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.series([ // functions
					next => { // entry
						exec.key([
							next => exec.optional(context, false, next),
							next => exec.assign(context, next),
						], next);
					},
					next => { // transform
						if (context.rename === '$key')        return exec.function(context,         functions[2], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						if (context.rename in context.target) return exec.function(context.shift(), functions[3], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						next();
					},
				], next);
			}, next),
		], next);
	}
});
filter["Type1{}"].functions = [
		(context, type, next) => {
// TODO use "Filter" type instead			
				if (utils.isFilter(type)) return next(new Error('cannot be recompiled')); 
// TODO could we keep and call compiled filter as opposed to just not compile it
				next();
			},(context, type, next) => {
// TODO use "Filter" type instead			
				if (utils.isFilter(type)) return next(new Error('cannot be recompiled')); 
// TODO could we keep and call compiled filter as opposed to just not compile it
				next();
			},(context, type, next) => { //
				if (type === undefined || type == null) return next(null, null); 
				next(new Error(`holds type not supported (${type})`));
			},(context, type, next) => { //
				if (type === undefined || type == null) return next(null, null); 
				next(new Error(`holds type not supported (${type})`));
			}
];
filter["Type1{}"].timestamp = 1681837793362;
filter["Type1{}"].compiler  = "v1";

Object.assign(filter, { "Shell1{}":
	function(context, functions, renamed, next) { // v1, key: Shell1{}, timestamp: 1681837793375
		exec.key([
			next => exec.optional(context, false, next),
			next => exec.object(context, (keys, renamed, next) => {
				exec.objectSeries([ // entries
					next => exec.keys(context, [ "$id" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, String, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$key", "$type" ], keys, (context, next) => { // object entries
						exec.key([
							next => {
								utils.intrinsic.filter["Type1{$optional:true}"](context, utils.intrinsic.filter["Type1{$optional:true}"].functions, renamed, next);
							},
						], next);
					}, next),
					next => exec.keys(context, [ "$any", "$switch" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.array(context, next => {
								exec.arraySeries(context, (index, next) => { // array entries
									exec.index(context, index, (context, next) => {
										exec.key([
											next => {
												utils.intrinsic.filter["Type1{}"](context, utils.intrinsic.filter["Type1{}"].functions, renamed, next);
											},
										], next);
									}, next)
								}, next)
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$remove" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$insert" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$default" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$map" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$optional" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$parallel" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Boolean, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$message" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$lt", "$lte", "$eq", "$ne", "$gte", "$gt" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$in", "$nin" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$inc", "$ninc" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$match" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$name", "$constructor" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$length", "$minlen", "$maxlen" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$rename" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$toArray", "$toObject" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$filter", "$transform", "$final" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Function, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$scope" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next)
				], err => exec.rest(err, context, keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next));
			}, next),
		], next);
	}
});
filter["Shell1{}"].functions = [];
filter["Shell1{}"].timestamp = 1681837793375;
filter["Shell1{}"].compiler  = "v1";

Object.assign(filter, { "Type1{$optional:true}":
	function(context, functions, renamed, next) { // v1, key: Type1{$optional:true}, timestamp: 1681837793386
		exec.any(context, [
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, true, next),
					next => exec.type(context, Array, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, true, next),
					next => exec.type(context, Object, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.key([
					next => exec.optional(context, true, next),
					next => exec.type(context, String, next),
					next => exec.assign(context, next),
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.series([ // functions
					next => { // entry
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Function, next),
							next => exec.assign(context, next),
						], next);
					},
					next => { // transform
						if (context.rename === '$key')        return exec.function(context,         functions[0], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						if (context.rename in context.target) return exec.function(context.shift(), functions[1], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						next();
					},
				], next);
			}, next),
			next => exec.anyOption(context, next => {
				exec.series([ // functions
					next => { // entry
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					},
					next => { // transform
						if (context.rename === '$key')        return exec.function(context,         functions[2], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						if (context.rename in context.target) return exec.function(context.shift(), functions[3], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
						next();
					},
				], next);
			}, next),
		], next);
	}
});
filter["Type1{$optional:true}"].functions = [
		(context, type, next) => {
// TODO use "Filter" type instead			
				if (utils.isFilter(type)) return next(new Error('cannot be recompiled')); 
// TODO could we keep and call compiled filter as opposed to just not compile it
				next();
			},(context, type, next) => {
// TODO use "Filter" type instead			
				if (utils.isFilter(type)) return next(new Error('cannot be recompiled')); 
// TODO could we keep and call compiled filter as opposed to just not compile it
				next();
			},(context, type, next) => { //
				if (type === undefined || type == null) return next(null, null); 
				next(new Error(`holds type not supported (${type})`));
			},(context, type, next) => { //
				if (type === undefined || type == null) return next(null, null); 
				next(new Error(`holds type not supported (${type})`));
			}
];
filter["Type1{$optional:true}"].timestamp = 1681837793386;
filter["Type1{$optional:true}"].compiler  = "v1";

Object.assign(filter, { "Object1{}":
	function(context, functions, renamed, next) { // v1, key: Object1{}, timestamp: 1681837793476
		exec.key([
			next => exec.optional(context, false, next),
			next => exec.object(context, (keys, renamed, next) => {
				exec.rest(null, context, keys, (context, next) => { // object entries
						exec.key([
							next => {
								utils.intrinsic.filter["Type1{}"](context, utils.intrinsic.filter["Type1{}"].functions, renamed, next);
							},
						], next);
					}, next);
			}, next),
		], next);
	}
});
filter["Object1{}"].functions = [];
filter["Object1{}"].timestamp = 1681837793476;
filter["Object1{}"].compiler  = "v1";

Object.assign(filter, { "Array1{}":
	function(context, functions, renamed, next) { // v1, key: Array1{}, timestamp: 1681837793477
		exec.series([ // functions
			next => { // filter
				exec.function(context, functions[0], '$filter', (err, keep) => { if (err) return next(err);
					next(keep !== undefined && !keep ? true : null);
				});
			},
			next => { // entry
				exec.key([
					next => exec.optional(context, false, next),
					next => exec.array(context, next => {
						exec.arraySeries(context, (index, next) => { // array entries
							exec.index(context, index, (context, next) => {
								exec.key([
									next => {
										utils.intrinsic.filter["Type1{}"](context, utils.intrinsic.filter["Type1{}"].functions, renamed, next);
									},
								], next);
							}, next)
						}, next)
					}, next),
					next => exec.minlen(context, 1, next),
				], next);
			},
		], next);
	}
});
filter["Array1{}"].functions = [
		(context, filter, next) => {
			if (filter.length > 1) context.source[context.key] = [ utils.merge(...filter) ];
			next(null, true);
		}
];
filter["Array1{}"].timestamp = 1681837793477;
filter["Array1{}"].compiler  = "v1";

Object.assign(filter, { "type1":
	function(context, functions, renamed, next) { // v1, key: type1, timestamp: 1681837793362
		exec.key([
			next => {
				utils.intrinsic.filter["Type1{}"](context, utils.intrinsic.filter["Type1{}"].functions, renamed, next);
			},
		], next);
	}
});
filter["type1"].functions = [];
filter["type1"].timestamp = 1681837793362;
filter["type1"].compiler  = "v1";

Object.assign(filter, { "shell1":
	function(context, functions, renamed, next) { // v1, key: shell1, timestamp: 1681837793374
		exec.key([
			next => {
				utils.intrinsic.filter["Shell1{}"](context, utils.intrinsic.filter["Shell1{}"].functions, renamed, next);
			},
		], next);
	}
});
filter["shell1"].functions = [];
filter["shell1"].timestamp = 1681837793374;
filter["shell1"].compiler  = "v1";

Object.assign(filter, { "object1":
	function(context, functions, renamed, next) { // v1, key: object1, timestamp: 1681837793476
		exec.key([
			next => {
				utils.intrinsic.filter["Object1{}"](context, utils.intrinsic.filter["Object1{}"].functions, renamed, next);
			},
		], next);
	}
});
filter["object1"].functions = [];
filter["object1"].timestamp = 1681837793476;
filter["object1"].compiler  = "v1";

Object.assign(filter, { "array1":
	function(context, functions, renamed, next) { // v1, key: array1, timestamp: 1681837793477
		exec.key([
			next => {
				utils.intrinsic.filter["Array1{}"](context, utils.intrinsic.filter["Array1{}"].functions, renamed, next);
			},
		], next);
	}
});
filter["array1"].functions = [];
filter["array1"].timestamp = 1681837793477;
filter["array1"].compiler  = "v1";

Object.assign(filter, { "Type2{}":
	function(context, functions, renamed, next) { // v2, key: Type2{}, timestamp: 1681837793883
		exec.series([ // functions
			next => { // filter
				exec.function(context, functions[20], '$filter', (err, keep) => { if (err) return next(err);
					next(keep !== undefined && !keep ? true : null);
				});
			},
			next => { // entry
				exec.switch([
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[0], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, false, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[1], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[2], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[3], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, false, next),
									next => exec.object(context, (keys, renamed, next) => {
										exec.rest(null, context, keys, (context, next) => { // object entries
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next);
									}, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[4], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[5], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[6], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => {
										utils.intrinsic.filter["Shell2{}"](context, utils.intrinsic.filter["Shell2{}"].functions, renamed, next);
									},
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[7], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[8], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[9], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, false, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[10], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[11], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[12], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.scope(context, {
											inside: "object"
									}, next),
									next => exec.optional(context, false, next),
									next => exec.object(context, (keys, renamed, next) => {
										exec.rest(null, context, keys, (context, next) => { // object entries
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next);
									}, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[13], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[14], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[15], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.scope(context, {
											inside: "array"
									}, next),
									next => exec.optional(context, false, next),
									next => exec.array(context, next => {
										exec.arraySeries(context, (index, next) => { // array entries
											exec.index(context, index, (context, next) => {
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next)
										}, next)
									}, next),
									next => exec.minlen(context, 1, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[16], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[17], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // entry
								exec.key([
									next => exec.optional(context, false, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[18], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[19], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
				], next);
			},
		], next);
	}
});
filter["Type2{}"].functions = [
		(context, filter, next) => next(null, utils.isType(filter, String)),(context, filter, next) => compiler2.compileString(context, next),(context, filter, next) => compiler2.compileString(context, next),(context, filter, next) => {
					if (utils.isObject(filter) && '$escape' in filter) {
						if (Object.keys(filter).length > 1) return next(new Error(`mixes $escape with other attributes`));
						return next(null, true);
					}
					next(null, false);
				},(context, filter, next) => next(null, filter.$escape),(context, filter, next) => next(null, filter.$escape),(context, filter, next) => {
					// if shell					
					if (utils.isObject(filter) && (utils.overlap(Object.keys(filter), utils.modifiers) && context.key != '$escape')) { 
						
						// create a working copy of modifiers, this allows inheritance but avoids sibling override
						context.scope.modifiers = Object.assign({}, context.scope.modifiers); 
						
						(next => {
							async.forEachOfSeries(filter, (entry, key, next) => {
								const keys = key.split(/[\|\+]/).map(key => key.trim());
								
								if (context.scope.inside == 'array') {
									if (keys.includes('$key')) return next(new Error(`.$key cannot filter key when inside array`))
									if (keys.includes('$rename')) return next(new Error(`.$rename cannot rename key when inside array`))
								}
								
								async.mapSeries(keys, (key, next) => {
									if (utils.isModifier(key)) {
										
										if (context.scope.insideKey && !globals.allowedInKey.includes(key)) return next(new Error(`makes illegal use of ${key} in context of $key`));
										
										context.scope.modified = context.scope.modified || key;
										if ([ '$type', '$any', '$switch', '$filter', '$transform', '$final', '$key' ].includes(key)) return next();
										
										// higher level modifiers take precedence / overload
										if (!(key in context.scope.modifiers)) context.scope.modifiers[key] = entry;
										
									} else
										context.scope.nonModified = context.scope.nonModified || key;
									next();
								}, err => { if (err) return next(err);
									if (context.scope.modified && context.scope.nonModified) {
										return next(new Error(`mixes modifier (${context.scope.modified}) with non-modifier (${context.scope.nonModified})`)); // TODO message needs work, %s/context.fullpath() is one tooo deep
									}
									next();
								});
							}, next);
						})(err => { if (err) return next(err);
							switch(('$type' in filter ? 1 : 0) + ('$any' in filter ? 2 : 0) + ('$switch' in filter ? 4 : 0)) {
							case 0: // pre-compile implicit $type
								context.source[context.key].$type = null;  // TODO this possibly overrides source, we must forward new source through $filter instead
								return next(null, true);
							case 1:
							case 2:
							case 4:
								return next(null, true);
							default: // catch multiple types
								return next(new Error('holds multiple of $type, $any, or $switch modifiers'));
							}
						});
					}
					else {
						next(null, false);
					}
				},(context, filter, next) => compiler2.compileShell(context, next),(context, filter, next) => compiler2.compileShell(context, next),(context, filter, next) => next(null, utils.isFunction(filter)),(context, filter, next) => compiler2.compileFunction(context, next),(context, filter, next) => compiler2.compileFunction(context, next),(context, filter, next) => next(null, utils.isObject(filter)),(context, filter, next) => compiler2.compileObject(context, next),(context, filter, next) => compiler2.compileObject(context, next),(context, filter, next) => { 
					if (! utils.isArray(filter)) return next(null, false);
					if (filter.length > 1) context.source[context.key] = [ utils.merge(...filter) ];
					next(null, true);
				},(context, filter, next) => compiler2.compileArray(context, next),(context, filter, next) => compiler2.compileArray(context, next),(context, filter, next) => { 
					(filter === null) ? 
						compiler2.compileFunction(context, next) :
					(filter === undefined) ?
						next(null) :	
						next(new Error(`holds unsupported value (${filter}), must be one of Boolean, Number, String, RegExp, Date, Array, [], Object, {}, or Function`));
				},(context, filter, next) => { 
					(filter === null) ? 
						compiler2.compileFunction(context, next) :
					(filter === undefined) ?
						next(null) :	
						next(new Error(`holds unsupported value (${filter}), must be one of Boolean, Number, String, RegExp, Date, Array, [], Object, {}, or Function`));
				},(context, filter, next) => {
			const parentKey = context.context && context.context.key;
			const parentFilter = parentKey !== undefined && context.context.source[parentKey];
			// delete modifiers if parent context is a true Object (not a shell) or a true Array (not defining $any or $switch)
			if ((utils.isObject(parentFilter) && (!utils.overlap(Object.keys(parentFilter), utils.modifiers) || context.key == '$escape')) ||
		    	(utils.isArray(parentFilter) && !['$any', '$switch'].includes(parentKey))) {
				context.setScopeEntry('modifiers', {});
			}
			if (context.key == '$key' && context.source.$key)
				context.setScopeEntry('inside', undefined).setScopeEntry('insideKey', true).setScopeEntry('modifiers', {});
			next();
		}
];
filter["Type2{}"].timestamp = 1681837793883;
filter["Type2{}"].compiler  = "v2";

Object.assign(filter, { "Shell2{}":
	function(context, functions, renamed, next) { // v2, key: Shell2{}, timestamp: 1681837793892
		exec.key([
			next => exec.optional(context, false, next),
			next => exec.object(context, (keys, renamed, next) => {
				exec.objectSeries([ // entries
					next => exec.keys(context, [ "$id" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, String, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$key", "$type" ], keys, (context, next) => { // object entries
						exec.key([
							next => {
								utils.intrinsic.filter["Type2{$optional:true}"](context, utils.intrinsic.filter["Type2{$optional:true}"].functions, renamed, next);
							},
						], next);
					}, next),
					next => exec.keys(context, [ "$any", "$switch" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.array(context, next => {
								exec.arraySeries(context, (index, next) => { // array entries
									exec.index(context, index, (context, next) => {
										exec.key([
											next => {
												utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
											},
										], next);
									}, next)
								}, next)
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$remove" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$insert" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$default" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$map" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$optional" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$parallel" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Boolean, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$message" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$lt", "$lte", "$eq", "$ne", "$gte", "$gt" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$in", "$nin" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$inc", "$ninc" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$match" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$name", "$constructor" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$length", "$minlen", "$maxlen" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$rename" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$toArray", "$toObject" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$filter", "$transform", "$final" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Function, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$scope" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next)
				], err => exec.rest(err, context, keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next));
			}, next),
		], next);
	}
});
filter["Shell2{}"].functions = [];
filter["Shell2{}"].timestamp = 1681837793892;
filter["Shell2{}"].compiler  = "v2";

Object.assign(filter, { "Type2{$optional:true}":
	function(context, functions, renamed, next) { // v2, key: Type2{$optional:true}, timestamp: 1681837793895
		exec.series([ // functions
			next => { // filter
				exec.function(context, functions[20], '$filter', (err, keep) => { if (err) return next(err);
					next(keep !== undefined && !keep ? true : null);
				});
			},
			next => { // entry
				exec.switch([
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[0], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[1], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[2], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[3], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, false, next),
									next => exec.object(context, (keys, renamed, next) => {
										exec.rest(null, context, keys, (context, next) => { // object entries
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next);
									}, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[4], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[5], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[6], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => {
										utils.intrinsic.filter["Shell2{$optional:true}"](context, utils.intrinsic.filter["Shell2{$optional:true}"].functions, renamed, next);
									},
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[7], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[8], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[9], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[10], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[11], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[12], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.scope(context, {
											inside: "object"
									}, next),
									next => exec.optional(context, true, next),
									next => exec.object(context, (keys, renamed, next) => {
										exec.rest(null, context, keys, (context, next) => { // object entries
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next);
									}, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[13], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[14], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // filter
								exec.function(context, functions[15], '$filter', (err, keep) => { if (err) return next(err);
									next(keep !== undefined && !keep ? true : null);
								});
							},
							next => { // entry
								exec.key([
									next => exec.scope(context, {
											inside: "array"
									}, next),
									next => exec.optional(context, true, next),
									next => exec.array(context, next => {
										exec.arraySeries(context, (index, next) => { // array entries
											exec.index(context, index, (context, next) => {
												exec.key([
													next => {
														utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
													},
												], next);
											}, next)
										}, next)
									}, next),
									next => exec.minlen(context, 1, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[16], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[17], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
					next => exec.switchOption(next => {
						exec.series([ // functions
							next => { // entry
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.assign(context, next),
								], next);
							},
							next => { // transform
								if (context.rename === '$key')        return exec.function(context,         functions[18], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								if (context.rename in context.target) return exec.function(context.shift(), functions[19], '$transform', (err, value, process) => exec.postTransform(err, context, context.rename, value, process, next));
								next();
							},
						], next);
					}, next),
				], next);
			},
		], next);
	}
});
filter["Type2{$optional:true}"].functions = [
		(context, filter, next) => next(null, utils.isType(filter, String)),(context, filter, next) => compiler2.compileString(context, next),(context, filter, next) => compiler2.compileString(context, next),(context, filter, next) => {
					if (utils.isObject(filter) && '$escape' in filter) {
						if (Object.keys(filter).length > 1) return next(new Error(`mixes $escape with other attributes`));
						return next(null, true);
					}
					next(null, false);
				},(context, filter, next) => next(null, filter.$escape),(context, filter, next) => next(null, filter.$escape),(context, filter, next) => {
					// if shell					
					if (utils.isObject(filter) && (utils.overlap(Object.keys(filter), utils.modifiers) && context.key != '$escape')) { 
						
						// create a working copy of modifiers, this allows inheritance but avoids sibling override
						context.scope.modifiers = Object.assign({}, context.scope.modifiers); 
						
						(next => {
							async.forEachOfSeries(filter, (entry, key, next) => {
								const keys = key.split(/[\|\+]/).map(key => key.trim());
								
								if (context.scope.inside == 'array') {
									if (keys.includes('$key')) return next(new Error(`.$key cannot filter key when inside array`))
									if (keys.includes('$rename')) return next(new Error(`.$rename cannot rename key when inside array`))
								}
								
								async.mapSeries(keys, (key, next) => {
									if (utils.isModifier(key)) {
										
										if (context.scope.insideKey && !globals.allowedInKey.includes(key)) return next(new Error(`makes illegal use of ${key} in context of $key`));
										
										context.scope.modified = context.scope.modified || key;
										if ([ '$type', '$any', '$switch', '$filter', '$transform', '$final', '$key' ].includes(key)) return next();
										
										// higher level modifiers take precedence / overload
										if (!(key in context.scope.modifiers)) context.scope.modifiers[key] = entry;
										
									} else
										context.scope.nonModified = context.scope.nonModified || key;
									next();
								}, err => { if (err) return next(err);
									if (context.scope.modified && context.scope.nonModified) {
										return next(new Error(`mixes modifier (${context.scope.modified}) with non-modifier (${context.scope.nonModified})`)); // TODO message needs work, %s/context.fullpath() is one tooo deep
									}
									next();
								});
							}, next);
						})(err => { if (err) return next(err);
							switch(('$type' in filter ? 1 : 0) + ('$any' in filter ? 2 : 0) + ('$switch' in filter ? 4 : 0)) {
							case 0: // pre-compile implicit $type
								context.source[context.key].$type = null;  // TODO this possibly overrides source, we must forward new source through $filter instead
								return next(null, true);
							case 1:
							case 2:
							case 4:
								return next(null, true);
							default: // catch multiple types
								return next(new Error('holds multiple of $type, $any, or $switch modifiers'));
							}
						});
					}
					else {
						next(null, false);
					}
				},(context, filter, next) => compiler2.compileShell(context, next),(context, filter, next) => compiler2.compileShell(context, next),(context, filter, next) => next(null, utils.isFunction(filter)),(context, filter, next) => compiler2.compileFunction(context, next),(context, filter, next) => compiler2.compileFunction(context, next),(context, filter, next) => next(null, utils.isObject(filter)),(context, filter, next) => compiler2.compileObject(context, next),(context, filter, next) => compiler2.compileObject(context, next),(context, filter, next) => { 
					if (! utils.isArray(filter)) return next(null, false);
					if (filter.length > 1) context.source[context.key] = [ utils.merge(...filter) ];
					next(null, true);
				},(context, filter, next) => compiler2.compileArray(context, next),(context, filter, next) => compiler2.compileArray(context, next),(context, filter, next) => { 
					(filter === null) ? 
						compiler2.compileFunction(context, next) :
					(filter === undefined) ?
						next(null) :	
						next(new Error(`holds unsupported value (${filter}), must be one of Boolean, Number, String, RegExp, Date, Array, [], Object, {}, or Function`));
				},(context, filter, next) => { 
					(filter === null) ? 
						compiler2.compileFunction(context, next) :
					(filter === undefined) ?
						next(null) :	
						next(new Error(`holds unsupported value (${filter}), must be one of Boolean, Number, String, RegExp, Date, Array, [], Object, {}, or Function`));
				},(context, filter, next) => {
			const parentKey = context.context && context.context.key;
			const parentFilter = parentKey !== undefined && context.context.source[parentKey];
			// delete modifiers if parent context is a true Object (not a shell) or a true Array (not defining $any or $switch)
			if ((utils.isObject(parentFilter) && (!utils.overlap(Object.keys(parentFilter), utils.modifiers) || context.key == '$escape')) ||
		    	(utils.isArray(parentFilter) && !['$any', '$switch'].includes(parentKey))) {
				context.setScopeEntry('modifiers', {});
			}
			if (context.key == '$key' && context.source.$key)
				context.setScopeEntry('inside', undefined).setScopeEntry('insideKey', true).setScopeEntry('modifiers', {});
			next();
		}
];
filter["Type2{$optional:true}"].timestamp = 1681837793895;
filter["Type2{$optional:true}"].compiler  = "v2";

Object.assign(filter, { "Shell2{$optional:true}":
	function(context, functions, renamed, next) { // v2, key: Shell2{$optional:true}, timestamp: 1681837793901
		exec.key([
			next => exec.optional(context, false, next),
			next => exec.object(context, (keys, renamed, next) => {
				exec.objectSeries([ // entries
					next => exec.keys(context, [ "$id" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, String, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$key", "$type" ], keys, (context, next) => { // object entries
						exec.key([
							next => {
								utils.intrinsic.filter["Type2{$optional:true}"](context, utils.intrinsic.filter["Type2{$optional:true}"].functions, renamed, next);
							},
						], next);
					}, next),
					next => exec.keys(context, [ "$any", "$switch" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.array(context, next => {
								exec.arraySeries(context, (index, next) => { // array entries
									exec.index(context, index, (context, next) => {
										exec.key([
											next => {
												utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
											},
										], next);
									}, next)
								}, next)
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$remove" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$insert" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$default" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$map" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$optional" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$parallel" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Boolean, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$message" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$lt", "$lte", "$eq", "$ne", "$gte", "$gt" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$in", "$nin" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Array, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$inc", "$ninc" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$match" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Boolean, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, RegExp, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Date, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$name", "$constructor" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$length", "$minlen", "$maxlen" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Number, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$rename" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$toArray", "$toObject" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, String, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$filter", "$transform", "$final" ], keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.type(context, Function, next),
							next => exec.assign(context, next),
						], next);
					}, next),
					next => exec.keys(context, [ "$scope" ], keys, (context, next) => { // object entries
						exec.any(context, [
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Function, next),
									next => exec.assign(context, next),
								], next);
							}, next),
							next => exec.anyOption(context, next => {
								exec.key([
									next => exec.optional(context, true, next),
									next => exec.type(context, Object, next),
									next => exec.assign(context, next),
								], next);
							}, next),
						], next);
					}, next)
				], err => exec.rest(err, context, keys, (context, next) => { // object entries
						exec.key([
							next => exec.optional(context, true, next),
							next => exec.assign(context, next),
						], next);
					}, next));
			}, next),
		], next);
	}
});
filter["Shell2{$optional:true}"].functions = [];
filter["Shell2{$optional:true}"].timestamp = 1681837793901;
filter["Shell2{$optional:true}"].compiler  = "v2";

Object.assign(filter, { "type2":
	function(context, functions, renamed, next) { // v2, key: type2, timestamp: 1681837793880
		exec.key([
			next => {
				utils.intrinsic.filter["Type2{}"](context, utils.intrinsic.filter["Type2{}"].functions, renamed, next);
			},
		], next);
	}
});
filter["type2"].functions = [];
filter["type2"].timestamp = 1681837793880;
filter["type2"].compiler  = "v2";

module.exports.timestamp = 1681837794031;
