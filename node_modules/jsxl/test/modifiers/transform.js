const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('Transform filter tests',()=>{

    it('Transform modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $transform modifier - this modifier will overwrite and replace any input values and any values that are tranformed by other modifiers
        // 1a - Verify input values are transformed as expected
        // 1b - Verify values are added even if $filter is false
        // 1c - Verify value from $insert, $default, $map are overwritten by $transform
        // 1d - Verify behavior when filter value is set to undefined and null

        // 1a - Verify input values are transformed as expected

        input = {
            a:5
        }
        filter = {
            $transform:(context,data,next)=>{
                next(null,{b:'Five'})
            }
        }
        output = { 
            b:'Five'
        }
        verifyResult('1a - $transform - Verify input values are transformed as expected',jsxlDirect(input,filter),undefined,output); 

        // 1b - Verify values are discarded if $filter is false
        input = {
            a:5
        }
        filter = {
            a:{
                $filter:(context,data,next)=>{
                    next(null,false)
                },
                $transform:(context,data,next)=>{
                    next(null,'Five')
                }
            }
        }
        output = {}
        verifyResult('1b - $transform - Verify values are added even if $filter is false',jsxlDirect(input,filter),undefined,output); 

        // 1c - Verify value from $insert, $default, $map are overwritten by $transform
        input = {
            a:1,
            b:undefined,
            c:1
        }
        filter = {
            a:{
                $insert:(context,data,next)=>{
                    next(null,'one')
                },
                $transform:(context,data,next)=>{
                    next(null,'ones')
                }
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,'one')
                },
                $transform:(context,data,next)=>{
                    next(null,'ones')
                }
            },
            c:{
                $map:(context,data,next)=>{
                    next(null,['zero','one'])
                },
                $transform:(context,data,next)=>{
                    next(null,'ones')
                }
            }
        }
        output = {
            a:'ones',
            b:'ones',
            c:'ones'
        }
        verifyResult('1c - $transform - Verify value from $insert, $default, $map are overwritten by $transform',jsxlDirect(input,filter),undefined,output); 

        // 1d - Verify behavior when filter value is set to undefined and null
        input = {
            a:5,
            b:6
        }
        filter = {
            a:{
                $transform:(context,data,next)=>{
                    next(null,undefined)
                }
            },
            b:{
                $transform:(context,data,next)=>{
                    next(null,null)
                }
            }
        }
        output = { 
            a:5,
            b:6
        }
        verifyResult('1d - $transform - Verify behavior when filter value is set to undefined and null',jsxlDirect(input,filter),undefined,output); 

    })

    it('Transform modifier - Pass invalid data types and verify error',()=>{

        // This test will validate the errors given out when data type other than function is passed to $transform
        // 2a - Verify error when string is passed
        // 2b - Verify error when invalid function is passed
        // 2c - Verify behavior when undefined is passed
        // 2d - Verify error when used along with non-modifier

        // 2a - Verify error when string is passed
        input = {
            a:5
        }
        filter = {
            a:{
                $transform:'Five'
            }
        }
        error = '(Compile) filter.a.$transform must be of type Function (not String)'
        verifyResult('2a - $transform - Verify error when string is passed',jsxlDirect(input,filter),error); 

        // 2b - Verify error when invalid function is passed
        input = {
            a:5
        }
        filter = {
            a:{
                $transform:Function
            }
        }
        error = '(Runtime) input.a.$transform function throws error: Unexpected identifier'
        verifyResult('2b - $transform - Verify error when invalid function is passed',jsxlDirect(input,filter),error); 

        // 2c - Verify behavior when undefined is passed
        input = {
            a:5
        }
        filter = {
            a:{
                $type: null
            }
        }
        output = {
            a:5
        }
        verifyResult('2c - $transform - Verify behavior when undefined is passed',jsxlDirect(input,filter),undefined,output); 

        // 2d - Verify error when used along with non-modifier
        input = {
            a:5
        }
        filter = {
            $transform:undefined,
            a:{}
        }
        error = '(Compile) filter mixes modifier ($transform) with non-modifier (a)'
        verifyResult('2d - $transform - Verify error when used along with non-modifier',jsxlDirect(input,filter),error); 

    })

})