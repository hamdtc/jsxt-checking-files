const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Comparision modifier tests',()=>{

    
    it('Comparision modifier - positive and generic error tests',()=>{

        // This test will verify expected errors and output with valid input and filter
        // 1a - Use a single filter with $gt, $lt against a valid input and verify output
        // 1b - Use a single filter with $gte, $lte against a valid input and verify output
        // 1c - Use a single filter with $ne, $eq against a valid input and verify output
        // 1d - Use a single filter with $gt, $lt via function against a valid input and verify output
        // 1e - Use a single filter with $gte, $lte via function against a valid input and verify output
        // 1f - Use a single filter with $ne, $eq via function against a valid input and verify output
        // 1g - Verify validation error with $gt, $lt against a valid input and verify output
        // 1h - Verify validation error with $gte, $lte against a valid input and verify output
        // 1i - Verify validation error with $ne, $eq against a valid input and verify output
        // 1j - Verify validation error with $gt, $lt via function against a valid input and verify output
        // 1k - Verify validation error with $gte, $lte via function against a valid input and verify output
        // 1l - Verify validation error with $ne, $eq via function against a valid input and verify output

        //1a - Use a single filter with $gt, $lt against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gt:5,
                $lt:15
            }
        }
        output = {
            a:10
        }
        verifyResult('1a - Comparision - $gt,$lt pass',jsxlDirect(input,filter),undefined,output);

        // 1b - Use a single filter with $gte, $lte against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gte:10,
                $lte:10
            }
        }
        output = {
            a:10
        }
        verifyResult('1b - Comparision - $gte,$lte pass',jsxlDirect(input,filter),undefined,output);

        // 1c - Use a single filter with $ne, $eq against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $ne:9,
                $eq:10
            }
        }
        output = {
            a:10
        }
        verifyResult('1c - Comparision - $ne, $eq pass',jsxlDirect(input,filter),undefined,output);

        // 1d - Use a single filter with $gt, $lt via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gt:(context,data,next)=>{
                    next(null,5)
                },
                $lt:(context,data,next)=>{
                    next(null,15)
                }
            }
        }
        output = {
            a:10
        }
        verifyResult('1d - Comparision - $gt,$lt function pass',jsxlDirect(input,filter),undefined,output);

        // 1e - Use a single filter with $gte, $lte via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gte:(context,data,next)=>{
                    next(null,10)
                },
                $lte:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        output = {
            a:10
        }
        verifyResult('1e - Comparision - $gte,$lte function pass',jsxlDirect(input,filter),undefined,output);

        // 1f - Use a single filter with $ne, $eq via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $ne:(context,data,next)=>{
                    next(null,9)
                },
                $eq:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        output = {
            a:10
        }
        verifyResult('1f - Comparision - $ne,$eq function pass',jsxlDirect(input,filter),undefined,output);

        // 1g - Verify validation error with $gt, $lt against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gt:5,
                $lt:10
            }
        }
        error = '(Runtime) input.a must be less than 10'
        verifyResult('1g - Comparision - $gt,$lt fail',jsxlDirect(input,filter),error);

        // 1h - Verify validation error with $gte, $lte against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gte:5,
                $lte:9
            }
        }
        error = '(Runtime) input.a must be less than or equal to 9'
        verifyResult('1h - Comparision - $gte,$lte fail',jsxlDirect(input,filter),error);

        // 1i - Verify validation error with $ne, $eq against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $ne:10,
                $eq:10
            }
        }
        error = '(Runtime) input.a must be different from 10'
        verifyResult('1i - Comparision - $ne,$eq fail',jsxlDirect(input,filter),error);

        // 1j - Verify validation error with $gt, $lt via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gt:(context,data,next)=>{
                    next(null,5)
                },
                $lt:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        error = '(Runtime) input.a must be less than 10'

        verifyResult('1j - Comparision - $gt,$lt function fail',jsxlDirect(input,filter),error);

        // 1k - Verify validation error with $gte, $lte via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $gte:(context,data,next)=>{
                    next(null,5)
                },
                $lte:(context,data,next)=>{
                    next(null,9)
                }
            }
        }
        error = '(Runtime) input.a must be less than or equal to 9'
        verifyResult('1k - Comparision - $gte,$lte function fail',jsxlDirect(input,filter),error);

        // 1l - Verify validation error with $ne, $eq via function against a valid input and verify output
        input = {
            a:10
        }
        filter = {
            a:{
                $ne:(context,data,next)=>{
                    next(null,10)
                },
                $eq:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        error = '(Runtime) input.a must be different from 10'
        verifyResult('1l - Comparision - $ne,$eq function fail',jsxlDirect(input,filter),error);

    })

    it('Comparision modifier - undefined and \n in filter',()=>{

        // This test will validate the behavior if undefined and new line operator '\n' is passed in filter- both directly and via function
        // 2a - Pass undefined in filter for $eq modifier via function and verify error message
        // 2b - Pass undefined in filter for $lt modifier directly - If passed directly the modifier will be ignored and no validation occurs
        // 2c - Pass '\n' in filter for $eq modifier via function and verify error message
        // 2d - Pass '\n' in filter for $eq modifier directly and verify the same error message as above

        // 2a - Pass undefined in filter for $eq modifier via function and verify error message
        input = {
            a:30
        }
        filter = {
            a:{
                $eq:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = "(Runtime) input.a.$eq function must return a value of type [ Boolean, Number, String, RegExp, Date ], not undefined"
        verifyResult('2a - Comparision - Pass undefined as value in a function',jsxlDirect(input,filter),error);

        // 2b - Pass undefined in filter for $lt modifier directly - If passed directly the modifier will be ignored and no validation occurs
        input = {
            a:30
        }
        filter = {
            a:{
                $lt:undefined
            }
        }
        error = "(Compile) one of\n"+
        "filter.a.$lt must be of type Function (not undefined),\n"+
        "filter.a.$lt must be of type Boolean (not undefined),\n"+
		"filter.a.$lt must be of type Number (not undefined),\n"+
		"filter.a.$lt must be of type String (not undefined),\n"+
		"filter.a.$lt must be of type RegExp (not undefined), or\n"+
		"filter.a.$lt must be of type Date (not undefined)"
        verifyResult('2b - Comparision - Pass undefined as value directly',jsxlDirect(input,filter),error);

        // 2c - Pass '\n' in filter for $eq modifier via function and verify error message
        input = {
            a:{
                arrStr:['1','2'],
            }
        }
        filter = {
            a:{
                arrStr:[{
                    $eq:(context,data,next)=>{
                        next(null,"\n")
                    }
                }]
            }
        }
        error = '(Runtime) input.a.arrStr[0] must be equal to "\\n"'
        verifyResult('2c - Comparision - Pass newline opeartor as value in a function',jsxlDirect(input,filter),error);

        // 2d - Pass '\n' in filter for $eq modifier directly and verify the same error message as above
        input = {
            a:{
                arrStr:['1','2'],
            }
        }
        filter = {
            a:{
                arrStr:[{
                    $eq:'\n'
                }]
            }
        }
        error = '(Runtime) input.a.arrStr[0] must be equal to "\\n"'
        verifyResult('2d - Comparision - Pass new line operator as direct value',jsxlDirect(input,filter),error);

    })

    it('Comparision modifier - Verify behaviour along side other modifiers',()=>{

        // This test will verify the behavior of comparision modifers when used along with other modifiers
        // 3a - Use a filter with - $gt and $tranform - the $gt validation will be performed before $transform
        // 3b - Use a filter with - $insert, $gte and $lte - the $gte amd $lte validation will be performed at the inserted value
        // 3c - Use a filter with - $default and $ne at a.test - $map and $eq at a.test1 - At c.test the $ne validation will be performed on $default value - At c.test1 the $eq validation will be performed on the mapped value from $map


        // The comparision modifiers used will have value passed both directly and via function

        // 3a - Use a filter with - $gt and $tranform - the $gt validation will be performed before $transform
        input = {
            a:35
        }
        filter = {
            a:{
                $gt:(context,data,next)=>{
                    next(null,30)
                },
                $transform:(context,data,next)=>{
                    next(null,'transformedValue')
                }
            }
        }
        output = {
            a: 'transformedValue'
        }
        verifyResult('3a - Comparison with $transform',jsxlDirect(input,filter),undefined,output);

        // 3b - Use a filter with - $insert, $gte and $lte - the $gte amd $lte validation will be performed at the inserted value
        input = {
            arrStr:['b','f','i'],
        }
        filter = {
            arrStr:{
                $insert:['c','d','g'],
                $gte:"c",
                $lte:(context,data,next)=>{
                    next(null,"g")
                }
            }
        }
        output = {
            arrStr: ['c','d','g']
        }
        verifyResult('3b - Comparison with $insert',jsxlDirect(input,filter),undefined,output);


        // 3c - Use a filter with - $default and $ne at a.test - $map and $eq at a.test1 - At c.test the $ne validation will be performed on $default value - At c.test1 the $eq validation will be performed on the mapped value from $map
        input = {
            a:{
                test:undefined,
                test1:1
            }
        }
        filter = {
            a:{
                test:{
                    $default:'default',
//                    $ne:undefined
                },
                test1:{
                    $map:['ada','test'],
                    $eq:'test'
                }
            }
        }
        output = {
            a: { test: undefined, test1: 'test' }
        }
        verifyResult('3c - Comparison with $default and map',jsxlDirect(input,filter),undefined,output);

    })
})