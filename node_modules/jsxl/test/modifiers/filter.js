const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('Filter modifier tests',()=>{

    it(`Filter modifier - Positive validation on filtering of data and error messages`,()=>{

        // This test will validate the functionality of $filter modifier to retain or ignore json values based on the value in filter
        // 1a - Verify $filter retains all the values when set to true
        // 1b - Verify $filter ignores values where values are set to false
        // 1c - Verify $filter:false at top level removes the entire object in output
        // 1d - Verify error when value is passed directly instead of using a Function


        // 1a - Verify $filter retains all the values when set to true
        input = {
            a:true,
            b:5
        }
        filter = {
            a:{
                $filter:(context,data,next)=>{
                    next(null,data)
                }
            },
            b:{
                $filter:(context,data,next)=>{
                    next(null,true)
                }
            }
        }
        output = {
            a:true,
            b:5
        }
        verifyResult('1a - $Filter - Verify $filter retains all the values when set to true',jsxlDirect(input,filter),undefined,output);


        // 1b - Verify $filter ignores values where values are set to false
        input = {
            a:false,
            b:5
        }
        filter = {
            a:{
                $filter:(context,data,next)=>{
                    next(null,data)
                }
            },
            b:{
                $filter:(context,data,next)=>{
                    next(null,true)
                }
            }
        }
        output = {
            b:5
        }
        verifyResult('1b - $filter - Verify $filter ignores values where values are set to false',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify $filter:false at top level removes the entire object and gives undefined as output
        input = {
            a:'test',
            b:5
        }
        filter = {
            $filter:(context,data,next)=>{
                next(null,false)
            },
            $type:{
                a:{
                    $filter:(context,data,next)=>{
                        next(null,true)
                    }
                },
                b:{
                    $filter:(context,data,next)=>{
                        next(null,true)
                    }
                }
            }   
        }
        output = 'undefined'
        verifyResult('1c - $filter - Verify $filter:false at top level removes the entire object in output',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify error when value is passed directly instead of using a Function
        input = {
            a:true,
        }
        filter = {
            a:{
                $filter:true
            }
        }
        error = '(Compile) filter.a.$filter must be of type Function (not Boolean)'
        verifyResult('1d - $filter - Verify error when value is passed directly instead of using a Function',jsxlDirect(input,filter),error);

    })

    it('Filter modifier - Verify behavior if datatype other Boolean is passed to $filter modifier',()=>{

        // This test will validate behavior if datatype other Boolean is passed to $filter modifier via function
        // 2a - Verify input is not filtered if string, number is passed to $filter
        // 2b - Verify input is not filtered if empty object, array is passed to $filter
        // 2c - Verify input is filtered if empty string, 0 is passed to $filter
        // 2d - Verify behavior if undefined, null is passed to $filter

        // 2a - Verify input is not filtered if string, number is passed to $filter
        input = {
            a:true,
            b:5
        }
        filter = {
            a:{
                $filter:(contet,data,next)=>{
                    next(null,'test')
                }
            },
            b:{
                $filter:(contet,data,next)=>{
                    next(null,1)
                }
            }
        }
        output = {
            a:true,
            b:5
        }
        verifyResult('2a - $filter - Verify input is not filtered if string, number is passed to $filter',jsxlDirect(input,filter),undefined,output);

        // 2b - Verify input is not filtered if empty object, array is passed to $filter
        input = {
            a:true,
            b:5
        }
        filter = {
            a:{
                $filter:(contet,data,next)=>{
                    next(null,{})
                }
            },
            b:{
                $filter:(contet,data,next)=>{
                    next(null,[])
                }
            }
        }
        output = {
            a:true,
            b:5
        }
        verifyResult('2b - $filter - Verify input is not filtered if empty object, array is passed to $filter',jsxlDirect(input,filter),undefined,output);

        // 2c - Verify input is filtered if empty string, 0 is passed to $filter
        input = {
            a:true,
            b:5
        }
        filter = {
            a:{
                $filter:(contet,data,next)=>{
                    next(null,'')
                }
            },
            b:{
                $filter:(contet,data,next)=>{
                    next(null,0)
                }
            }
        }
        output = {}
        verifyResult('2c - $filter - Verify input is filtered if empty string, 0 is passed to $filter',jsxlDirect(input,filter),undefined,output);

        // 2d - Verify behavior if undefined, null is passed to $filter
        // undefined will have no effect on the input, passing null will act as false hence will ignore the input value
        input = {
            a:true,
            b:5
        }
        filter = {
            a:{
                $filter:(contet,data,next)=>{
                    next(null,undefined)
                }
            },
            b:{
                $filter:(contet,data,next)=>{
                    next(null,null)
                }
            }
        }
        output = {
            a:true
        }
        verifyResult('2d - $filter - Verify behavior if undefined, null is passed to $filter',jsxlDirect(input,filter),undefined,output); 

    })

})