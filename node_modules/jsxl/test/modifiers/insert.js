const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Insert Modifier Tests',()=>{

    it('Insert modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of insert modifier - This modifier will overwrite the existing values in input or insert new values if not already present
        // 1a - Verify values are overwritten and inserted for a given input
        // 1b - Verify values are overwritten and inserted for a given input - Fn
        // 1c - Verify behavior if null is inserted directly and via function
        // 1d - Verify behavior when undefined is inserted directly and via function
        // 1e - Verify output when insert is used at the outer most level

        // 1a - Verify values are overwritten and inserted for a given input
        input = {
            a:'input'
        }
        filter = {
            a:{
                $insert:Infinity
            }
        }
        output = {
            a:Infinity
        }
        verifyResult('1a - $insert - Verify values are overwritten and inserted for a given input',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify values are overwritten and inserted for a given input - Fn
        input = {
            a:'input'
        }
        filter = {
            a:{
                $insert:(context,data,next)=>{
                    next(null,'\n')
                }
            }
        }
        output = {
            a:'\n'
        }
        verifyResult('1b - $insert - Verify values are overwritten and inserted for a given input - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify behavior if null is inserted directly and via function
        input = {
            a:'input',
            b:'input'
        }
        filter = {
            a:{
                $insert:null
            },
            b:{
                $insert:(context,data,next)=>{
                    next(null,null)
                }
            }
        }
        output = {
            a:null,
            b:null
        }
        verifyResult('1c - $insert - Verify behavior if null is inserted directly and via function',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify behavior when undefined is inserted directly and via function
        input = {
            a:'input',
            b:'input'
        }
        filter = {
            a:{
                $insert:undefined
            },
            b:{
                $insert:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        output = {
            a:undefined,
            b:undefined
        }
        verifyResult('1d - $insert - Verify behavior when undefined is inserted directly and via function',jsxlDirect(input,filter),undefined,output);

        // 1e - Verify output when insert is used at the outer most level and again modified by $insert at inner level
        input = {
            a:'input',
            b:'input'
        }
        filter = {
            $insert:{
                a:'insertedValue'
            },
            $type:{
                a:{
                    $filter:(context,data,next)=>{
                        next(null,data.includes('insertedValue'))
                    },
                    $insert:'insertedAtInnerLevel'
                }
            }
           
        }
        output = {
            a:'insertedAtInnerLevel'
        }
        verifyResult('1e - $insert - Verify output when insert is used at the outer most level',jsxlDirect(input,filter),undefined,output);

    })

    it('Insert modifier - Use $insert along different modifiers',()=>{

        // This test will validate the behavior of $insert modifier along with other modifiers
        // 2a - Verify $type modifer validates the inserted value
        // 2b - Verify error if $insert is used alpng with $default

        // 2a - Verify $type modifer validates the inserted value
        input = {
            a:'input'
        }
        filter = {
            a:{
                $insert:(context,data,next)=>{
                    next(null,['test'])
                },
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not Array)'
        verifyResult('2a - $insert - Verify $type modifer validates the inserted value',jsxlDirect(input,filter),error);


        // 2b - Verify error if $insert is used alpng with $default
        input = {
            a:undefined
        }
        filter = {
            a:{
                $insert:(context,data,next)=>{
                    next(null,['test'])
                },
                $default:'test'
            }
        }
        error = '(Compile) filter.a.$type holds multiple of $insert, $default, or $optional modifiers'
        verifyResult('2b - $insert - Verify error if $insert is used alpng with $default',jsxlDirect(input,filter),error);

    })

})