const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('ToObject Modifers test',()=>{

    it('ToObject Modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $toObject modifier - which will transform an array into an object
        // 1a - Verify array of objects are tranformed into an object
        // 1b - Verify array of objects are tranformed into an object - Fn
        // 1c - Verify error if array doesnot have any objects
        // 1d - Veriy error if object key value is not a string

        // 1a - Verify array of objects are tranformed into an object
        input = {
            a:[{'one':'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:'one'
            }
        }
        output = { 
            a: { '1': { two: '2' } }
        }
        verifyResult('1a - $toObject - Verify array of objects are tranformed into an object',jsxlDirect(input,filter),undefined,output); 

        // 1b - Verify array of objects are tranformed into an object - Fn
        input = {
            a:[{'one':'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:(contet,data,next)=>{
                    next(null,'one')
               }
            }
        }
        output = { 
            a: { '1': { two: '2' } }
        }
        verifyResult('1b - $toObject - Verify array of objects are tranformed into an object - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify error if array doesnot have any objects
        input = {
            a:['one','two']
        }
        filter = {
            a:{
               $toObject:(contet,data,next)=>{
                    next(null,'one')
               }
            }
        }
        error = '(Runtime) input.a[0] must be an object for array to convert to object'
        verifyResult('1c - $toObject - Verify error if array doesnot have any objects',jsxlDirect(input,filter),error);

        // 1d - Veriy error if object key value is not a string
        input = {
            a:[{'one':{},'two':'2'}]
        }
        filter = {
            a:{
               $toObject:'one'
            }
        }
        error = '(Runtime) input.a[0] has non-String object key: one'
        verifyResult('1d - $toObject - Veriy error if object key value is not a string',jsxlDirect(input,filter),error);

    })

    it('ToObject Modifier - Pass invalid datatypes in filter and input',()=>{

        // This test will validate the errors when invalid data types are passed in filter and input
        // 2a - Verify error if number is passed as value in filter
        // 2b - Verify error if Function keyword is passed as value in filter - Fn
        // 2c - Verify error if object key is not present in input array object

        // 2a - Verify error if number is passed as value in filter
        input = {
            a:[{1:'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:1
            }
        }
        error = '(Compile) one of\nfilter.a.$toObject must be of type Function (not Number) or\nfilter.a.$toObject must be of type String (not Number)'
        verifyResult('2a - $toObject - Verify error if number is passed as value in filter',jsxlDirect(input,filter),error); 

        // 2b - Verify error if Function keyword is passed as value in filter - Fn
        input = {
            a:[{1:'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:(context,data,next)=>{
                    next(null,Function)
               }
            }
        }
        error = '(Runtime) input.a.$toObject function must return a value of type String, not Function'
        verifyResult('2b - $toObject - Verify error if Function keyword is passed as value in filter - Fn',jsxlDirect(input,filter),error); 

        // 2c - Verify error if object key is not present in input array object
        input = {
            a:[{'one':'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:(context,data,next)=>{
                    next(null,'three')
               }
            }
        }
        error = '(Runtime) input.a[0] has no object key: three'
        verifyResult('2c - $toObject - Verify error if object key is not present in input array object',jsxlDirect(input,filter),error);

    })

    it('ToObject Modifier - Use With Other modofoers',()=>{

        // This test will validate the behavior of $toObject modifier when used along with other modifiers
        // 3a - Verify transformed values are converted to object
        // 3b - Verify includes modifier validation are performed on toarrays that are converted

        // 3a - Verify transformed values are converted to object
        input = {
            a:[{'one':'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:'one',
               $type:[{
                $transform:(context,data,next)=>{
                    next(null,{'one':'111'})
                }
            }]
            }
        }
        output = { 
            a: { '111': {} }
        }
        verifyResult('3a - $toObject - Verify transformed values are converted to object',jsxlDirect(input,filter),undefined,output); 

        // 3b - Verify includes modifier validation are performed before $toObject is executed
        input = {
            a:[{'one':'1','two':'2'}]
        }
        filter = {
            a:{
               $toObject:'one',
               $type:[{
                $inc:(context,data,next)=>{
                    next(null,'one')
                }
            }]
            }
        }
        output = { 
            a: { '1': { two: '2' } }
        }
        verifyResult('3b - $toObject - Verify includes modifier validation are performed on toarrays that are converted',jsxlDirect(input,filter),undefined,output); 

    })
})