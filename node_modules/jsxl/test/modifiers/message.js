const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('Message modifier tests',()=>{

    it('$message modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $message modifier to overwrite the error messgaes generated from jsxl and iosert custome messages
        // 1a - Verify message from $message modifier is displayed when error occurs while validation - Fn
        // 1b - Verify message from $message modifier is displayed when error occurs while validation 
        // 1c - Verify messages are not dispalyed when no error occurs

        // 1a - Verify message from $message modifier is displayed when error occurs while validation
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:6,
                $message:(context,data,next)=>{
                    next(null,'This is a custom message')
                }
            }
        }
        error = '(Runtime) input.a This is a custom message'
        verifyResult('1a - $message - Verify message from $message modifier is displayed when error occurs while validation - Fn',jsxlDirect(input,filter),error);

        // 1b - Verify message from $message modifier is displayed when error occurs while validation
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:6,
                $message:'This is a custom message'
            }
        }
        error = '(Runtime) input.a This is a custom message'
        verifyResult('1b - $message - Verify message from $message modifier is displayed when error occurs while validation',jsxlDirect(input,filter),error);

        // 1c - Verify messages are not dispalyed when no error occurs
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:4,
                $message:'This is a custom message'
            }
        }
        output = {
            a:5
        }
        verifyResult('1c - $message - Verify messages are not dispalyed when no error occurs',jsxlDirect(input,filter),undefined,output);
    })

    it('Pass other data types',()=>{

        // This test will validate the errors if datatypes otherthan string is passed to $message modifier
        // 2a - Verify error when Number is passed
        // 2b- Verify error when null is passed inside a function
        // 2c - Verify behavior when newLine operator '\n' is passed

        // 2a - Verify error when Number is passed
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:6,
                $message:100
            }
        }
        error = '(Compile) one of\nfilter.a.$message must be of type Function (not Number) or\nfilter.a.$message must be of type String (not Number)'
        verifyResult('2a - $message - Verify error when Number is passed',jsxlDirect(input,filter),error);

        // 2b- Verify error when null is passed inside a function
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:6,
                $message:(contet,data,next)=>{
                    next(null,null)
                }
            }
        }
        error = '(Runtime) input.a.$message function must return a value of type String, not null'
        verifyResult('2b - $message - Verify error when null is passed inside a function',jsxlDirect(input,filter),error);

        // 2c - Verify behavior when newLine operator '\n' is passed
        input = {
            a:5
        }
        filter = {
            a:{
                $gt:6,
                $message:(contet,data,next)=>{
                    next(null,'\n')
                }
            }
        }
        error = '(Runtime) input.a \n'
        verifyResult('2c - $message - Verify behavior when newLine operator new line operator is passed',jsxlDirect(input,filter),error);


    })
})