const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Match modifier tests',()=>{

    it('Match modifier - positive and generic error tests',()=>{

        // This test will validate the functionality of $match modifier - This modifier will verify if a string from input matches the value from $match in filter - It can take a string, number, boolean, date, function or a regex in filter
        // 1a - Verify strings are matched with no errors if valid input is passed
        // 1b - Verify error when regex is used in filter and the value from input does not match
        // 1c - Verify error when regex is used in filter and the value from input does not match - Fn
        // 1d - Verify error when string is used in filter and the value from input does not match
        // 1e - Verify error when string is used in filter and the value from input does not match - Fn

        // 1a - Verify strings are matched with no errors if valid input is passed
        input = {
            a:'test',
            b:false,
            c:new Date().getDate()
        }
        filter = {
            a:{
                $match:/^[test][\d]*/
            },
            b:{
                $match:(context,data,next)=>{
                    next(null,false)
                }
            },
            c:{
                $match:new Date().getDate()
            }
        }
        output = {
            a:'test',
            b:false,
            c:new Date().getDate()
        }
        verifyResult('1a - Match - Verify strings are matched with no errors if valid input is passed',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify error when regex is used in filter and the value from input does not match
        input = {
            a:'test'
        }
        filter = {
            a:{
                $match:/^[seed][\d]*/
            }
        }
        error = '(Runtime) input.a must match /^[seed][\\d]*/'
        verifyResult('1b - Match - Verify error when regex is used in filter and the value from input does not match',jsxlDirect(input,filter),error);

        // 1c - Verify error when regex is used in filter and the value from input does not match - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $match:(context,data,next)=>{
                    next(null,/^[seed][\d]*/)
                }
            }
        }
        error = '(Runtime) input.a must match /^[seed][\\d]*/'
        verifyResult('1c - Match - Verify error when regex is used in filter and the value from input does not match - Fn',jsxlDirect(input,filter),error);

        // 1d - Verify error when string is used in filter and the value from input does not match
        input = {
            a:'test'
        }
        filter = {
            a:{
                $match:'ting'
            }
        }
        error = '(Runtime) input.a must match "ting"'
        verifyResult('1d - Match - Verify error when string is used in filter and the value from input does not match',jsxlDirect(input,filter),error);

        // 1e - Verify error when string is used in filter and the value from input does not match - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $match:(context,data,next)=>{
                    next(null,'ting')
                }
            }
        }
        error = '(Runtime) input.a must match "ting"'
        verifyResult('1e - Match - Verify error when string is used in filter and the value from input does not match - Fn',jsxlDirect(input,filter),error);

    })

    it('Match modifier - Verify nehavior if invalid datatypes are passed in input and filter',()=>{

        // This test will validate the errors from $match modifier when datatypes other than string and regex are passed in filter and input
        // 2a - Verify error if array is passed in filter
        // 2b - Verify error if object is passed in filter - Fn
        // 2c - Verify error if undefined is passed in filter - Fn 

        // 2a - Verify error if array is passed in filter
        input = {
            a:[0,1]
        }
        filter = {
            a:{
                $match:[0,1]
            }
        }
        error = '(Compile) one of\nfilter.a.$match must be of type Function (not Array),\nfilter.a.$match must be of type Boolean (not Array),\nfilter.a.$match must be of type Number (not Array),\nfilter.a.$match must be of type String (not Array),\nfilter.a.$match must be of type RegExp (not Array), or\nfilter.a.$match must be of type Date (not Array)'
        verifyResult('2a - Match - Verify error if array is passed in filter',jsxlDirect(input,filter),error);

        // 2b - Verify error if object is passed in filter - Fn
        input = {
            a:{0:'zero'}
        }
        filter = {
            a:{
                $match:{0:'zero'}
            }
        }
        error = '(Compile) one of\nfilter.a.$match must be of type Function (not Object),\nfilter.a.$match must be of type Boolean (not Object),\nfilter.a.$match must be of type Number (not Object),\nfilter.a.$match must be of type String (not Object),\nfilter.a.$match must be of type RegExp (not Object), or\nfilter.a.$match must be of type Date (not Object)'
        verifyResult('2b - Match - Verify error if object is passed in filter - Fn',jsxlDirect(input,filter),error);

        // 2c - Verify error if undefined is passed in filter - Fn 
        input = {
            a:'test'
        }
        filter = {
            a:{
                $match:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = '(Runtime) input.a.$match function must return a value of type [ Boolean, Number, String, RegExp, Date ], not undefined'
        verifyResult('2c - Match - Verify error if undefined is passed in filter - Fn',jsxlDirect(input,filter),error);

    })

    it('Match modifier - Use $match with other modifiers',()=>{

        // This test will validate the behavior of $match modifers with other modifiers
        // 3a - Verify match validations occur on $inserted, $default and $mapped values
        
        input = {
            a:'test',
            c:0
        }
        filter = {
            a:{
                $insert:'insertedValue',
                $match:/^[insert][\d]*/
            },
            b:{
                $default:false,
                $match:(context,data,next)=>{
                    next(null,false)
                }
            },
            c:{
                $map:[new Date().getDate()],
                $match:new Date().getDate()
            }
        }
        output = {
            a:'insertedValue',
            b:false,
            c:new Date().getDate()
        }
        verifyResult('3a - Match - Verify match validations occur on $inserted, $default and $mapped values',jsxlDirect(input,filter),undefined,output);

    })
})