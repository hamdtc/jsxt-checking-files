const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('ToArray Modifier test',()=>{

    it('ToArray Modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $toArray modifier - which will transform any object from input into an array
        // 1a - Verify object is tranformed to an array
        // 1b - Verify object is tranformed to an array - Fn
        // 1c - Verify object inside an array is tranformed to an array
        // 1d - Verify error if input value is not an object

        // 1a - Verify object is tranformed to an array
        input = {
            a:{
                'test':{
                    'one':1,
                    'two':2
                }
            }
        }
        filter = {
            a:{
               $toArray:'toArray'
            }
        }
        output = { 
            a: [ { one: 1, two: 2, toArray: 'test' } ]
        }
        verifyResult('1a - $toArray - Verify object is tranformed to an array',jsxlDirect(input,filter),undefined,output); 

        // 1b - Verify object is tranformed to an array - Fn
        input = {
            a:{
                'one':1,
                'two':2
            }
        }
        filter = {
            $toArray:(contet,data,next)=>{
                next(null,'toArray')
            }
        }
        output = [ { one: 1, two: 2, toArray: 'a' } ]
        verifyResult('1b - $toArray - Verify object is tranformed to an array - Fn',jsxlDirect(input,filter),undefined,output); 

        // 1c - Verify object inside an array is tranformed to an array
        input = {
            a:[{
                'test':{
                    'one':1,
                    'two':2
                }
            }]
        }
        filter = {
            a:[{
               $toArray:'toArray'
            }]
        }
        output = { 
            a: [ [ { one: 1, two: 2, toArray: 'test' } ] ]
        }
        verifyResult('1c - $toArray - Verify object inside an array is tranformed to an array',jsxlDirect(input,filter),undefined,output); 

        // 1d - Verify error if input value is not an object
        input = {
            a:{
                'one':1,
                'two':2
            }
        }
        filter = {
            a:{
               $toArray:'toArray'
            }
        }
        error = '(Runtime) input.a.one must be an object for object to convert to array'
        verifyResult('1d - $toArray - Verify error if input value is not an object',jsxlDirect(input,filter),error); 

    })

    it('ToArray Modifier - Pass invalid data types and verify error',()=>{

        // This test will validate the errors given by $toArray when invalid data types are passed via filter
        // 2a - Verify error if Number is passed in filter
        // 2b - Verify error if null passed in filter - Fn
        // 2c - Verify error if undefined is passed in filter - Fn
        
        // 2a - Verify error if Number is passed in filter
        input = {
            a:{
                'test':{
                    'one':1,
                    'two':2
                }
            }
        }
        filter = {
            a:{
               $toArray:0
            }
        }
        error = '(Compile) one of\nfilter.a.$toArray must be of type Function (not Number) or\nfilter.a.$toArray must be of type String (not Number)'
        verifyResult('2a - $toArray - Verify error if Number is passed in filter',jsxlDirect(input,filter),error); 

        // 2b - Verify error if null passed in filter - Fn
        input = {
            a:{
                'test':{
                    'one':1,
                    'two':2
                }
            }
        }
        filter = {
            a:{
               $toArray:(contet,data,next)=>{
                    next(null,null)
               }
            }
        }
        error = '(Runtime) input.a.$toArray function must return a value of type String, not null'
        verifyResult('2b - $toArray - Verify error if null passed in filter - Fn',jsxlDirect(input,filter),error); 

        // 2c - Verify error if undefined is passed in filter - Fn
        input = {
            a:{
                'test':{
                    'one':1,
                    'two':2
                }
            }
        }
        filter = {
            a:{
               $toArray:(contet,data,next)=>{
                    next(null,undefined)
               }
            }
        }
        error = '(Runtime) input.a.$toArray function must return a value of type String, not undefined'
        verifyResult('2c - $toArray - Verify error if undefined is passed in filter - Fn',jsxlDirect(input,filter),error); 

    })

    it('ToArray Modifier - Verify behavior when used with other modifiers',()=>{

        // This test will validate the behavior of $toArray modifiers when used along with other modifiers
        // 3a - Verify defauled values are tranformed to array
        // 3b - Verify inserted values are transformed to array
        // 3c - Verify renamed values are included in transformed array

        // 3a - Verify defauled values are tranformed to array
        input = {
        }
        filter = {
            a:{
                $default:{
                    'test':{
                        'one':1,
                        'two':2
                    }
                },
                $toArray:'toArray'
            }
        }
        output = { 
            a: [ { one: 1, two: 2, toArray: 'test' } ]
        }
        verifyResult('3a - $toArray - Verify defauled values are tranformed to array',jsxlDirect(input,filter),undefined,output); 

        // 3b - Verify inserted values are transformed to array
        input = {
            a:undefined
        }
        filter = {
            a:{
                $insert:{
                    'test':{
                        'one':1,
                        'two':2
                    }
                },
                $toArray:'toArray'
            }
        }
        output = { 
            a: [ { one: 1, two: 2, toArray: 'test' } ]
        }
        
        verifyResult('3b - $toArray - Verify inserted values are transformed to array',jsxlDirect(input,filter),undefined,output); 

        // 3c - Verify renamed values are included in transformed array
        // Bug - Doubt - $rename is not executed in the below code and is considered as an object key value
        input = {
        }
        filter = {
            a:{
                $insert:{
                    'test':{
                        'one':{
                            $rename:'RenamedOne'
                        },
                        'two':{
                            $rename:'RenamedTwo'
                        }
                    }
                },
                $toArray:'toArray'
            }
        }
        output = {
            a: [ { one: { $rename: 'RenamedOne' }, two: { $rename: 'RenamedTwo' }, toArray: 'test' } ]
        }
        verifyResult('3c - $toArray - Verify renamed values are included in transformed array',jsxlDirect(input,filter),undefined,output); 

    })
})