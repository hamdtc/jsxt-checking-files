const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('Map modifiers test',()=>{

    it('Map modifier - Map String and invalid datatypes to objects along with other modifers',()=>{

        // This test will validate the functionality of $map modifier - when an object is set as value in filter, the input must be of type string.
        // 1a - Verify no errors occur when string is passed in input and mapped to an object
        // 1b - Verify error when input does not contain the mapped keys
        // 1c - Verify error when input does not contain the mapped keys - Fn
        // 1d - Verify error when input is integer
        // 1e - Verify error when input is integer - Fn
        // 1f - Verify error when input is undefined
        // 1g - Verify error when input is undefined - Fn
        // 1h - Verify error when input is null
        // 1i - Verify error when input is null - Fn
        // 1j - Verify error when input is Object
        // 1k - Verify error when input is Object - Fn
        // 1l - Verify error when input is Array
        // 1m - Verify error when input is Array - Fn
        // 1n - Verify behavior when undefined is passed as value to $map filter
        // 1o - Verify behavior when undefined is passed as value to $map filter - Fn
        // 1p - Verify error when null is passed as value to $map filter
        // 1q - Verify error when number is passed as value to $map filter - Fn


        // 1a - Verify no errors occur when string is passed in input and mapped to an object
        input = {
            a:['test','test1'],
            b:'test2'
        }
        filter = {
            a:[{
                $map:{
                    'test':['Mapped',1],
                    'test1':{1:undefined,2:{"n": 'g'},3:null}
                }
            }],
            b:{
                $map:(context,data,next)=>{
                    next(null,{'test1':1,'test2':2})
                }
            }
        }
        output = {
            a:[[ 'Mapped', 1], { '1': undefined, '2': { n: 'g' }, '3': null }],
            b:2
        }
        verifyResult('1a - $map - Verify no errors occur when string is passed in input and mapped to an object',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify error when input does not contain the mapped keys
        input = {
            a:'test1'
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must be included in [ "test", "test2" ]'
        verifyResult('1b - $map - Verify error when input does not contain the mapped keys',jsxlDirect(input,filter),error);

        // 1c - Verify error when input does not contain the mapped keys - Fn
        input = {
            a:'test1'
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must be included in [ "test", "test2" ]'
        verifyResult('1c - $map - Verify error when input does not contain the mapped keys - Fn',jsxlDirect(input,filter),error);

        // 1d - Verify error when input is integer
        input = {
            a:1
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Number)'
        verifyResult('1d - $map - Verify error when input is integer',jsxlDirect(input,filter),error);
    
        // 1e - Verify error when input is integer - Fn
        input = {
            a:1
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Number)'
        verifyResult('1e - $map - Verify error when input is integer - Fn',jsxlDirect(input,filter),error);

        // 1f - Verify error when input is undefined
        input = {
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('1f - $map - Verify error when input is undefined',jsxlDirect(input,filter),error);

        // 1g - Verify error when input is undefined - Fn
        input = {
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('1g - $map - Verify error when input is undefined - Fn',jsxlDirect(input,filter),error);

        // 1h - Verify error when input is null
        input = {
            a:null
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not null)'
        verifyResult('1h - $map - Verify error when input is null',jsxlDirect(input,filter),error);

        // 1i - Verify error when input is null - Fn
        input = {
            a:null
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not null)'
        verifyResult('1i - $map - Verify error when input is null - Fn',jsxlDirect(input,filter),error);

        // 1j - Verify error when input is Object
        input = {
            a:{test:0,test2:2}
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Object)'
        verifyResult('1j - $map - Verify error when input is Object',jsxlDirect(input,filter),error);

        // 1k - Verify error when input is Object - Fn
        input = {
            a:{test:0,test2:2}
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Object)'
        verifyResult('1k - $map - Verify error when input is Object - Fn',jsxlDirect(input,filter),error);

        // 1l - Verify error when input is Array
        input = {
            a:['test','test2']
        }
        filter = {
            a:{
                $map:{
                    test:0,
                    test2:2
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Array)'
        verifyResult('1l - $map - Verify error when input is Array',jsxlDirect(input,filter),error);

        // 1m - Verify error when input is Array - Fn
        input = {
            a:['test','test2']
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,{'test':0,'test2':2})
                }
            }
        }
        error = '(Runtime) input.a must map with type String (not Array)'
        verifyResult('1m - $map - Verify error when input is Array - Fn',jsxlDirect(input,filter),error);

        // 1n - Verify behavior when undefined is passed as value to $map filter
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:undefined
            }
        }
        error = '(Compile) one of\nfilter.a.$map must be of type Function (not undefined),\nfilter.a.$map must be of type Array (not undefined), or\nfilter.a.$map must be of type Object (not undefined)'
        verifyResult('1n - $map - Verify behavior when undefined is passed as value to $map filter',jsxlDirect(input,filter),error);

        // 1o - Verify behavior when undefined is passed as value to $map filter - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = '(Runtime) input.a.$map function must return a value of type [ Array, Object ], not undefined'
        verifyResult('1o - $map - Verify behavior when undefined is passed as value to $map filter - Fn',jsxlDirect(input,filter),error);

        // 1p - Verify error when null is passed as value to $map filter
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:null
            }
        }
        error = '(Compile) one of\nfilter.a.$map must be of type Function (not null),\nfilter.a.$map must be of type Array (not null), or\nfilter.a.$map must be of type Object (not null)'
        verifyResult('1p - $map - Verify error when null is passed as value to $map filter',jsxlDirect(input,filter),error);

        // 1q - Verify error when number is passed as value to $map filter - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,5)
                }
            }
        }
        error = '(Runtime) input.a.$map function must return a value of type [ Array, Object ], not Number'
        verifyResult('1q - $map - Verify error when number is passed as value to $map filter - Fn',jsxlDirect(input,filter),error);


    })

    it('Map modifier - Map Number and invalid datatypes to Arrays',()=>{

        // This test will validate the functionality of $map modifier - when an Array is set as value in filter, the input must be of type Number.
        // 2a - Verify no errors occur when array is set as filter value and input is number
        // 2b - Verify error when input is string
        // 2c - Verify error when input is string - Fn
        // 2d - Verify error when input number is greater than array length in filter
        // 2e - Verify error when input number is greater than array length in filter - Fn
        // 2f - Verify error when input is undefined
        // 2g - Verify error when input is undefined - Fn
        // 2h - Verify error when input is null
        // 2i - Verify error when input is null - Fn
        // 2j - Verify error when input is object
        // 2k - Verify error when input is object - Fn
        // 2l - Verify error when input is Array
        // 2m - Verify error when input is Array - Fn
        // 2n - Verify error when filter value is undefined
        // 2o - Verify error when filter value is undefined - Fn
        // 2p - Verify error when filter value is null
        // 2q - Verify error when filter value is string - Fn

        // 2a - Verify no errors occur when array is set as filter value and input is number
        input = {
            a:[0,1],
            b:2
        }
        filter = {
            a:[{
                $map:[['Mapped',1],{1:undefined,2:{"n": 'g'},3:null}]
            }],
            b:{
                $map:(context,data,next)=>{
                    next(null,['test0','test1','test2'])
                }
            }
        }
        output = {
            a:[[ 'Mapped', 1], { '1': undefined, '2': { n: 'g' }, '3': null }],
            b:'test2'
        }
        verifyResult('2a - $map - Verify no errors occur when array is set as filter value and input is number',jsxlDirect(input,filter),undefined,output);

        // 2b - Verify error when input is string
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must map with type Number (not String)'
        verifyResult('2b - $map - Verify error when input is string',jsxlDirect(input,filter),error);

        // 2c - Verify error when input is string - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must map with type Number (not String)'
        verifyResult('2c - $map - Verify error when input is string - Fn',jsxlDirect(input,filter),error);

        // 2d - Verify error when input number is greater than array length in filter
        input = {
            a:3
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must be in range of [ 0, 2 ]'
        verifyResult('2d - $map - Verify error when input number is greater than array length in filter',jsxlDirect(input,filter),error);

        // 2e - Verify error when input number is greater than array length in filter - Fn
        input = {
            a:3
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must be in range of [ 0, 2 ]'
        verifyResult('2e - $map - Verify error when input number is greater than array length in filter - Fn',jsxlDirect(input,filter),error);

        // 2f - Verify error when input is undefined
        input = {
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('2f - $map - Verify error when input is undefined',jsxlDirect(input,filter),error);

        // 2g - Verify error when input is undefined - Fn
        input = {
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('2g - $map - Verify error when input is undefined - Fn',jsxlDirect(input,filter),error);

        // 2h - Verify error when input is null
        input = {
            a:null
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must map with type Number (not null)'
        verifyResult('2h - $map - Verify error when input is null',jsxlDirect(input,filter),error);

        // 2i - Verify error when input is null - Fn
        input = {
            a:null
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must map with type Number (not null)'
        verifyResult('2i - $map - Verify error when input is null - Fn',jsxlDirect(input,filter),error);

        // 2j - Verify error when input is object
        input = {
            a:{'test':0,1:1}
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must map with type Number (not Object)'
        verifyResult('2j - $map - Verify error when input is object',jsxlDirect(input,filter),error);

        // 2k - Verify error when input is object - Fn
        input = {
            a:{'test':0,1:1}
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must map with type Number (not Object)'
        verifyResult('2k - $map - Verify error when input is object - Fn',jsxlDirect(input,filter),error);

        // 2l - Verify error when input is Array
        input = {
            a:[0,1,2]
        }
        filter = {
            a:{
                $map:['test',1,0]
            }
        }
        error = '(Runtime) input.a must map with type Number (not Array)'
        verifyResult('2l - $map - Verify error when input is Array',jsxlDirect(input,filter),error);

        // 2m - Verify error when input is Array - Fn
        input = {
            a:[0,1,2]
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,['test',1,0])
                }
            }
        }
        error = '(Runtime) input.a must map with type Number (not Array)'
        verifyResult('2m - $map - Verify error when input is Array - Fn',jsxlDirect(input,filter),error);

        // 2n - Verify error when filter value is undefined
        input = {
            a:1
        }
        filter = {
            a:{
                $map:undefined
            }
        }
        error = '(Compile) one of\nfilter.a.$map must be of type Function (not undefined),\nfilter.a.$map must be of type Array (not undefined), or\nfilter.a.$map must be of type Object (not undefined)'
        verifyResult('2n - $map - Verify error when filter value is undefined',jsxlDirect(input,filter),error);

        // 2o - Verify error when filter value is undefined - Fn
        input = {
            a:[0,1,2]
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = '(Runtime) input.a.$map function must return a value of type [ Array, Object ], not undefined'
        verifyResult('2o - $map - Verify error when filter value is undefined - Fn',jsxlDirect(input,filter),error);

        // 2p - Verify error when filter value is null
        input = {
            a:1
        }
        filter = {
            a:{
                $map:null
            }
        }
        error = '(Compile) one of\nfilter.a.$map must be of type Function (not null),\nfilter.a.$map must be of type Array (not null), or\nfilter.a.$map must be of type Object (not null)'
        verifyResult('2p - $map - Verify error when filter value is null',jsxlDirect(input,filter),error);

        // 2q - Verify error when filter value is string - Fn
        input = {
            a:1
        }
        filter = {
            a:{
                $map:(context,data,next)=>{
                    next(null,'0')
                }
            }
        }
        error = '(Runtime) input.a.$map function must return a value of type [ Array, Object ], not String'
        verifyResult('2q - $map - Verify error when filter value is string - Fn',jsxlDirect(input,filter),error);


    })

    it('Map Modifier - Verify behavior when $map is used along with $filter modifier',()=>{

        // This test will validate the funtionality of $map modifeir when used along with $filter modifier
        // 3a - Verify no error occur when mapped value and $type are String
        // 3b - Verify error when mapped value is integer and $type is String
        // 3c - Verify error when mapped value is String and $type is Number
        // 3d - Verify no error occur when $type validation is performed on mapped values
        // 3e - Verify error when mapped value is object and $type is Number
        // 3f - Verify no error occur when $type validation is performed on mapped values - Fn

        // 3a - Verify no error occur when mapped value and $type are String
        input = {
            a:2
        }
        filter = {
            a:{
                $type:String,
                $map:(context,data,next)=>{
                    next(null,['zero','one','two','three'])
                }
            }
        }
        output = {a:'two'}
        verifyResult('3a - $map - Verify no error occur when mapped value and $type are String',jsxlDirect(input,filter),undefined,output);

        // 3b - Verify error when mapped value is integer and $type is String
        input = {
            a:2
        }
        filter = {
            a:{
                $type:String,
                $map:(context,data,next)=>{
                    next(null,[0,1,2,3])
                }
            }
        }
        error = '(Runtime) input.a must be of type String (not Number)'
        verifyResult('3b - $map - Verify error when mapped value is integer and $type is String',jsxlDirect(input,filter),error);

        // 3c - Verify error when mapped value is String and $type is Number
        input = {
            a:2
        }
        filter = {
            a:{
                $type:Number,
                $map:(context,data,next)=>{
                    next(null,['zero','one','two','three'])
                }
            }
        }
        error = '(Runtime) input.a must be of type Number (not String)'
        verifyResult('3c - $map - Verify error when mapped value is String and $type is Number',jsxlDirect(input,filter),error);

        // 3d - Verify no error occur when $type validation is performed on mapped values
        input = {
            a:2
        }
        filter = {
            a:{
                $type:{three:Number},
                $map:[{one:1},{two:2},{three:3}]
            }
        }
        output = { a: { three: 3 } }
        verifyResult('3d - $map - Verify no error occur when $type validation is performed on mapped values',jsxlDirect(input,filter),undefined,output);

        // 3e - Verify error when mapped value is object and $type is Number
        input = {
            a:2
        }
        filter = {
            a:{
                $type:Number,
                $map:(context,data,next)=>{
                    next(null,[{one:1},{two:2},{three:3}])
                }
            }
        }
        error = "(Runtime) input.a must be of type Number (not Object)"
        verifyResult('3e - $map - Verify error when mapped value is object and $type is Number',jsxlDirect(input,filter),error);

        // 3f - Verify no error occur when $type validation is performed on mapped values - Fn
        input = {
            a:2
        }
        filter = {
            a:{
                $type:{three:Number,two:Number},
                $map:(context,data,next)=>{
                    next(null,[{one:1},{two:2},{three:3}])
                }
            }
        }
        error = "(Runtime) input.a.two must be provided"
        verifyResult('3f - $map - Verify no error occur when $type validation is performed on mapped values - Fn',jsxlDirect(input,filter),error);


    })
})