const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Array Length Modifiers tests',()=>{

    it('Array length modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of length modifiers - This modifier $maxlen, $minlen, $length will validate the length of arrays in input for maximum length, minimum length and excact length respectively.
        // 1a - Verify no errors if input array length are within the specified limits in filter
        // 1b - Verify no errors if input array length are within the specified limits in filter - Fn
        // 1c - Verify error if input array length exceeds the $maxlen value
        // 1d - Verify error if input array length exceeds the $maxlen value - Fn
        // 1e - Verify error if input array length is below the $minlen value
        // 1f - Verify error if input array length is below the $minlen value - Fn
        // 1g - Verify error if input array length is not equal to $length value 
        // 1h - Verify error if input array length is not equal to $length value  - Fn

        // 1a - Verify no errors if input array length are within the specified limits in filter
        input = {
            a:[0,1,2,3],
            b:[0,1,2,3,4],
            c:[0,1,2]
        }
        filter = {
            a:{
                $maxlen:4
            },
            b:{
                $minlen:5
            },
            c:{
                $length:3
            }
        }
        output = {
            a:[0,1,2,3],
            b:[0,1,2,3,4],
            c:[0,1,2]
        }
        verifyResult('1a - Length - Verify no errors if input array length are within the specified limits in filter',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify no errors if input array length are within the specified limits in filter - Fn
        input = {
            a:[0,1,2,3],
            b:[0,1,2,3,4],
            c:[0,1,2]
        }
        filter = {
            a:{
                $maxlen:(context,data,next)=>{
                    next(null,4)
                }
            },
            b:{
                $minlen:(context,data,next)=>{
                    next(null,5)
                }
            },
            c:{
                $length:(context,data,next)=>{
                    next(null,3)
                }
            }
        }
        output = {
            a:[0,1,2,3],
            b:[0,1,2,3,4],
            c:[0,1,2]
        }
        verifyResult('1b - Length - Verify no errors if input array length are within the specified limits in filter - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify error if input array length exceeds the $maxlen value
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $maxlen:3
            }
        }
        error = '(Runtime) input.a must have maximum length 3'
        verifyResult('1c - Length - Verify error if input array length exceeds the $maxlen value',jsxlDirect(input,filter),error);

        // 1d - Verify error if input array length exceeds the $maxlen value - Fn
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $maxlen:(context,data,next)=>{
                    next(null,3)
                }
            }
        }
        error = '(Runtime) input.a must have maximum length 3'
        verifyResult('1d - Length - Verify error if input array length exceeds the $maxlen value - Fn',jsxlDirect(input,filter),error);

        // 1e - Verify error if input array length is below the $minlen value
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $minlen:5
            }
        }
        error = '(Runtime) input.a must have minimum length 5'
        verifyResult('1e - Length - Verify error if input array length is below the $minlen value',jsxlDirect(input,filter),error);

        // 1f - Verify error if input array length is below the $minlen value - Fn
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $minlen:(context,data,next)=>{
                    next(null,5)
                }
            }
        }
        error = '(Runtime) input.a must have minimum length 5'
        verifyResult('1f - Length - Verify error if input array length is below the $minlen value - Fn',jsxlDirect(input,filter),error);

        // 1g - Verify error if input array length is not equal to $length value 
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $length:5
            }
        }
        error = '(Runtime) input.a must have exact length 5'
        verifyResult('1g - Length - Verify error if input array length is not equal to $length value',jsxlDirect(input,filter),error);

        // 1h - Verify error if input array length is not equal to $length value  - Fn
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $length:(context,data,next)=>{
                    next(null,5)
                }
            }
        }
        error = '(Runtime) input.a must have exact length 5'
        verifyResult('1h - Length - Verify error if input array length is not equal to $length value  - Fn',jsxlDirect(input,filter),error);

    })

    it('Array length modifier - Verify error when invalid datatypes are passed input and filter',()=>{

        // This test will validate the errors when data types other than array is passedin input and datatypes other than number is passed through filter
        // 2a - Length - Verify error if string is passed in filter
        // 2b - Length - Verify error if string is passed in filter - Fn
        // 2c - Length - Verify behavior if undefined is passed in filter
        // 2d - Length - Verify error if undefined is passed in filter - Fn
        // 2e - Length - Verify error if object is passed in input
        // 2f - Length - Verify error if String is passed in input

        // 2a - Length - Verify error if string is passed in filter
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $length:'4'
            }
        }
        error = '(Compile) one of\nfilter.a.$length must be of type Function (not String) or\nfilter.a.$length must be of type Number (not String)'
        verifyResult('2a - Length - Verify error if string is passed in filter',jsxlDirect(input,filter),error);

        // 2b - Length - Verify error if string is passed in filter - Fn
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $minlen:(context,data,next)=>{
                    next(null,'4')
                }
            }
        }
        error = '(Runtime) input.a.$minlen function must return a value of type Number, not String'
        verifyResult('2b - Length - Verify error if string is passed in filter - Fn',jsxlDirect(input,filter),error);

        // 2c - Length - Verify behavior if undefined is passed in filter
        // Modifier is ignored if undefined is passed directly in filter
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $maxlen:4
            }
        }
        output = {
            a:[0,1,2,3]
        }
        verifyResult('2c - Length - Verify error if undefined is passed in filter',jsxlDirect(input,filter),undefined,output);

        // 2d - Length - Verify error if undefined is passed in filter - Fn
        input = {
            a:[0,1,2,3]
        }
        filter = {
            a:{
                $minlen:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = '(Runtime) input.a.$minlen function must return a value of type Number, not undefined'
        verifyResult('2d - Length - Verify error if undefined is passed in filter - Fn',jsxlDirect(input,filter),error);

        // 2e - Length - Verify error if object is passed in input
        input = {
            a:{'zero':0,'one':1,'two':2}
        }
        filter = {
            a:{
                $maxlen:8
            }
        }
        error = '(Runtime) input.a must have maximum length 8'
        verifyResult('2e - Length - Verify error if object is passed in input',jsxlDirect(input,filter),error);

        // 2f - Length - Verify error if String is passed in input
        input = {
            a:'test'
        }
        filter = {
            a:{
                $length:8
            }
        }
        error = '(Runtime) input.a must have exact length 8'
        verifyResult('2f - Length - Verify error if String is passed in input',jsxlDirect(input,filter),error);

    })

    it('Array length modifier - Verify behavior of Length With other modifiers',()=>{

        // This test will validate the behavior of Length modifers with other modifiers
        // 3a - Verify length validations occur on $inserted, $default and $mapped values
        
        input = {
            a:'insertHere',
            c:2
        }
        filter = {
            a:{
                $insert:[0,1,2,3],
                $maxlen:4
            },
            b:{
                $default:[0,1,2,3,4],
                $minlen:5
            },
            c:{
                $map:[0,1,[1,2,3]],
                $length:3
            }
        }
        output = {
            a:[0,1,2,3],
            b:[0,1,2,3,4],
            c:[1,2,3]
        }
        verifyResult('3a - Length - Verify length validations occur on $inserted, $default and $mapped values',jsxlDirect(input,filter),undefined,output);
        
    })
})