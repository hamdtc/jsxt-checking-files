const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Rename modifier tests',()=>{

    it('Rename modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $rename modifier - Which will rename the keys of input object
        // 1a - Verify output object keys are renamed as expected
        // 1b - Verify output object keys are renamed as expected - Fn
        // 1c - Verify error is $rename when used inside an array 

        // 1a - Verify output object keys are renamed as expected
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:'RenamedA'
            }
        }
        output = {
            'RenamedA':5
        }
        verifyResult('1a - $rename - Verify output object keys are renamed as expected',jsxlDirect(input,filter),undefined,output); 

        // 1b - Verify output object keys are renamed as expected - Fn
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:(context,data,next)=>{
                    next(null,'RenamedA')
               }
            }
        }
        output = {
            'RenamedA':5
        }
        verifyResult('1b - $rename - Verify output object keys are renamed as expected - Fn',jsxlDirect(input,filter),undefined,output); 


        // 1c - Verify error is $rename when used inside an array
        input = {
            a:[1,2]
        }
        filter = {
            a:[{
               $rename:(context,data,next)=>{
                    next(null,'RenamedA')
               }
            }]
        }
        error = '(Compile) filter.a[0].$rename cannot rename key when inside array'
        verifyResult('1c - $rename - Verify error is $rename key when used inside an array',jsxlDirect(input,filter),error); 


    })

    it('Rename modifier - Verify Behavior when Passed other datatypes',()=>{

        // This test will validate the behavior of $rename modifier - When passed invalid data types
        // 2a - Verify error when number is passed in filter
        // 2b - Verify error when number is passed in filter - Fn
        // 2c - Verify error when Function keyword is passed in filter
        // 2d - Verify error when Function keyword is passed in filter - Fn

        // 2a - Verify error when number is passed in filter
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:0
            }
        }
        error = '(Compile) one of\nfilter.a.$rename must be of type Function (not Number) or\nfilter.a.$rename must be of type String (not Number)'
        verifyResult('2a - $rename - Verify error when number is passed in filter',jsxlDirect(input,filter),error); 

        // 2b - Verify error when number is passed in filter - Fn
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:(context,data,next)=>{
                next(null,123)
                }
            }
        }
        error = '(Runtime) input.a.$rename function must return a value of type String, not Number'
        verifyResult('2b - $rename - Verify error when number is passed in filter - Fn',jsxlDirect(input,filter),error); 

        // 2c - Verify error when Function keyword is passed in filter
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:Function
            }
        }
        error = '(Runtime) input.a.$rename function throws error: Unexpected identifier'
        verifyResult('2c - $rename - Verify error when Function keyword is passed in filter',jsxlDirect(input,filter),error); 

        // 2d - Verify error when Function keyword is passed in filter - Fn
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:(context,data,next)=>{
                next(null,Function)
                }
            }
        }
        error = '(Runtime) input.a.$rename function must return a value of type String, not Function'
        verifyResult('2d - $rename - Verify error when Function keyword is passed in filter - Fn',jsxlDirect(input,filter),error); 

    })

    it('Rename modifier - Use alongside other modifier',()=>{

        // This test will validate the behavior of $rename modifier when used along with other modifiers
        // 3a - Verify transform overwrites renamed values keys
        // 3b - Verify inserted value keys are renamed

        // 3a - Verify transform overwrites renamed values keys
        input = {
            a:5
        }
        filter = {
            $type:{
                a:{
                    $rename:(context,data,next)=>{
                            next(null,'RenamedA')
                    }
                }
            },
            $transform:(context,data,next)=>{
                next(null,'test')
            }
        }
        output = 'test'
        verifyResult('3a - $rename - Verify transform overwrites renamed values keys',jsxlDirect(input,filter),undefined,output); 

        // 3b - Verify inserted value keys are renamed
        input = {
            a:5
        }
        filter = {
            a:{
               $rename:'RenamedA',
               $insert:'insertedValue'
            }
        }
        output = {
            'RenamedA':'insertedValue'
        }
        verifyResult('3b - $rename - Verify inserted value keys are renamed',jsxlDirect(input,filter),undefined,output); 

    })
})