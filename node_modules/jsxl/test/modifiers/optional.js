const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Optional modifiers Test',()=>{

    it('Optional modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $optional modifier, which will verify values from input are present, if not an error will be returned
        // 1a - Verify no error is returned if optional is set to true and input is present
        // 1b - Verify no error is returned if optional is set to true and input is not present - Fn
        // 1c - Verify no error is returned when optional is set to false and input is present
        // 1d - Verify error when optional is set to false and input is not present - Fn

        // 1a - Verify no error is returned if optional is set to true and input is present
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:true
            }
        }
        output = {
            a:5
        }
        verifyResult('1a - $optional - Verify no error is returned if optional is set to true and input is present',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify no error is returned if optional is set to true and input is not present
        input = {}
        filter = {
            a:{
               $optional:(context,data,next)=>{
                next(null,true)
           }
            }
        }
        output = {}
        verifyResult('1b - $optional - Verify no error is returned if optional is set to true and input is not present',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify no error is returned when optional is set to false and input is present
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:false
            }
        }
        output = {
            a:5
        }
        verifyResult('1c - $optional - Verify no error is returned when optional is set to false and input is present',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify error when optional is set to false and input is not present
        input = {
            
        }
        filter = {
            a:{
               $optional:(context,data,next)=>{
                    next(null,false)
               }
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('1d - $optional - Verify error when optional is set to false and input is not present',jsxlDirect(input,filter),error);

    })

  

    it('Optional modifier - Verify error when invalid data types are passed to $optional in filter',()=>{

        // This test will validate the errors when invalid data types (other than boolean) are passed to $optional in filter
        // 2a - Verify error if number is passed directly
        // 2b - Verify error is null passed inside a function
        // 2c - Verify behavior if undefined is passed inside a function

        // 2a - Verify error if number is passed directly
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:1,
            }
        }
        error = '(Compile) one of\nfilter.a.$optional must be of type Function (not Number) or\nfilter.a.$optional must be of type Boolean (not Number)'
        verifyResult('2a - $optional - Verify error if number is passed directly',jsxlDirect(input,filter),error);

        // 2b - Verify error is null passed inside a function
        input = {
        }
        filter = {
            a:{
               $optional:(context,data,next)=>{
                    next(null,null)
               },
            }
        }
        error = '(Runtime) input.a.$optional function must return a value of type Boolean, not null'
        verifyResult('2b - $optional - Verify error if number is passed directly',jsxlDirect(input,filter),error);

        // 2c - Verify behavior if undefined is passed inside a function
        input = {
        }
        filter = {
            a:{
               $optional:(context,data,next)=>{
                    next(null,undefined)
               },
            }
        }
        error = '(Runtime) input.a.$optional function must return a value of type Boolean, not undefined'
        verifyResult('2c - $optional - Verify behavior if undefined is passed inside a function',jsxlDirect(input,filter),error);

    })

    it('Optional modifier - Verify behavior along with other modifiers',()=>{

        // This test will verify behavior of $optional modifier with other modifier
        // 3a - Verify error if $optional is used along with $default
        // 3b - Verify error if $optional is used along with $insert
        // 3c - Verify error if $optional is used along with $remove
        // 3d - Verify behavior when $optional is used along with $transform

        // 3a - Verify error if $optional is used along with $default
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:false,
               $default:6
            }
        }
        error = '(Compile) filter.a.$type holds multiple of $insert, $default, or $optional modifiers'
        verifyResult('3a - $optional - Verify error if $optional is used along with $default',jsxlDirect(input,filter),error);

        // 3b - Verify error if $optional is used along with $insert
        // Bug - No error is thrown when $optional is passed a function when used along with $insert or $default
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:(context,data,next)=>{
                next(null,false)
               },
               $insert:6
            }
        }
        error = '(Compile) filter.a.$type holds multiple of $insert, $default, or $optional modifiers'
        verifyResult('3b - $optional - Verify error if $optional is used along with $insert',jsxlDirect(input,filter),error);

        // 3c - Verify error if $optional is used along with $remove
        // Doubt - Bug - Why no error is given when remove and optional conflict each other
        input = {
            a:5
        }
        filter = {
            a:{
               $optional:false,
               $remove:true
            }
        }
        output = {}
        verifyResult('3c - $optional - Verify error if $optional is used along with $remove',jsxlDirect(input,filter),undefined,output);

        // 3d - Verify behavior when $optional is used along with $transform
        input = {
            
        }
        filter = {
            $transform:(context,data,next)=>{
                next(null,{a:5})
            },
            $optional:(context,data,next)=>{
                next(null,false)
            }
        }
        output = {a:5}
        verifyResult('3d - $optional - Verify behavior when $optional is used along with $transform',jsxlDirect(input,filter),undefined,output);

    })
})