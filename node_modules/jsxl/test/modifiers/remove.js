const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Remove modifier tests',()=>{
    
    it('Remove modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $remove modifier which will remove any values from input is set as true
        // 1a - Verify if values from input are removed is set as true
        // 1b - Verify if values from input are removed is set as true - Fn
        // 1c - Verify values are not removed from input if set as false
        // 1d - Verify values are not removed from input if set as false - Fn

        // 1a - Verify if values from input are removed is set as true
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:true
            }
        }
        output = {}
        verifyResult('1a - $remove - Verify if values from input are removed is set as true',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify if values from input are removed is set as true - Fn
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:(context,data,next)=>{
                    next(null,true)
               }
            }
        }
        output = {}
        verifyResult('1b - $remove - Verify if values from input are removed is set as true - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify values are not removed from input if set as false
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:false
            }
        }
        output = {
            a:5
        }
        verifyResult('1c - $remove - Verify values are not removed from input if set as false',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify values are not removed from input if set as false - Fn
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:(context,data,next)=>{
                next(null,false)
                }
            }
        }
        output = {
            a:5
        }
        verifyResult('1d - $remove - Verify values are not removed from input if set as false - Fn',jsxlDirect(input,filter),undefined,output);

    })

    it('Remove modifier - Verify error when passed invalid data types',()=>{

        // This test will validate the errors when $remove modifier is passed invalid data types (Other than boolean)
        // 2a - Verify error when string is passed
        // 2b - Verify error when null is passed inside a function

        // 2a - Verify error when string is passed
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:'test'
            }
        }
        error = '(Compile) one of\nfilter.a.$remove must be of type Function (not String) or\nfilter.a.$remove must be of type Boolean (not String)'
        verifyResult('2a - $remove - Verify error when string is passed',jsxlDirect(input,filter),error);

        // 2b - Verify error when null is passed inside a function
        input = {
            a:5
        }
        filter = {
            a:{
               $remove:(context,data,next)=>{
                next(null,null)
                }
            }
        }
        error = '(Runtime) input.a.$remove function must return a value of type Boolean, not null'
        verifyResult('2b - $remove - Verify error when null is passed inside a function',jsxlDirect(input,filter),error);

    })

})