const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('Scope modifiers test',()=>{

    it('Scope modifier - Verify scope set at each level is passed down without error',()=>{

        // This test will validate the functionality of $scope modifier which will pass down any object that is set to the level below - It will overwrite the object if multiple levels contains the same object key in $scope filter
        // 1a - Verify no errors occur and the scope object is overwritten as expected

        // 1a - Verify no errors occur and the scope object is overwritten as expected
        input = {
            a:{
                b:{
                    c:{
                        d:1
                    },
                    e:{
                    }
                },
                f:{ 
                }
            },
            g:{
                h:2
            }
        }

        filter = {
            a:{
                $scope:{'Level':'a',x:5},
                $transform:(context,a,next)=>{
                    next(null,{'scope-A':context.scope,data:a})
                },
                $type:{
                    b:{
                        $scope:{'Level':"b",y:10},
                        $transform:(context,b,next)=>{
                            next(null,{'scope-B':context.scope,data:b})
                        },
                        $type:{
                            c:{
                                $scope:{'Level':'c'},
                                $transform:(context,c,next)=>{
                                    next(null,{'scope-C':context.scope,data:c})
                                },
                                $type:{
                                    d:{
                                        $scope:{'Level':'d',z:15},
                                        $transform:(context,d,next)=>{
                                            next(null,{'scope-D':context.scope,data:d})
                                        }
                                    }
                                }
                            },
                            e:{
                                $scope:{'currLevel':'e'},
                                $transform:(context,e,next)=>{
                                    next(null,{'scope-E':context.scope,data:e})
                                }
                            }
                        }
                    },
                    f:{
                        $scope:{'currLevel':'f',x:null,y:undefined,z:'\n'},
                        $transform:(context,f,next)=>{
                            next(null,{'scope-F':context.scope,data:f})
                        }
                    }
                }
            },
            g:{
                $scope:{'Level':'g',y:50},
                $transform:(context,g,next)=>{
                    next(null,{'scope-G':context.scope,data:g})
                },
                $type:{
                    h:{
                        $scope:{'currLevel':'h',y:55},
                        $transform:(context,h,next)=>{
                            next(null,{'scope-H':context.scope,data:h})
                        }
                    }
                }
            }
          }

        output = {
            a: {
              'scope-A': { Level: 'a', x: 5 },
              data: {
                b: {
                  'scope-B': { Level: 'b', x: 5, y: 10 },
                  data: {
                    c: {
                      'scope-C': { Level: 'c', x: 5, y: 10 },
                      data: {
                        d: {
                          'scope-D': { Level: 'd', x: 5, y: 10, z: 15 },
                          data: 1
                        }
                      }
                    },
                    e: {
                      'scope-E': { Level: 'b', x: 5, y: 10, currLevel: 'e' },
                      data: {}
                    }
                  }
                },
                f: {
                  'scope-F': {
                    Level: 'a',
                    x: null,
                    currLevel: 'f',
                    y: undefined,
                    z: '\n'
                  },
                  data: {}
                }
              }
            },
            g: {
              'scope-G': { Level: 'g', y: 50 },
              data: {
                h: { 'scope-H': { Level: 'g', y: 55, currLevel: 'h' }, data: 2 }
              }
            }
          }

        verifyResult('1a - $scope - Verify no errors occur and the scope object is overwritten as expected',jsxlDirect(input,filter),undefined,output); 

    })

    it('Scope modifier - Verify error message for different data types other than object',()=>{

        // This test will validate the errors from $scope modifier when datatypes other than object is set as value
        // 2a - Verify error when string is set as value
        // 2b - Verify error when string is set as value - Fn
        // 2c - Verify error when interger is set as value
        // 2d - Verify error when interger is set as value - Fn
        // 2e - Verify error when null is set as value
        // 2f - Verify error when null is set as value - Fn
        // 2g - Verify behavior when undefined is set as value
        // 2h - Verify behavior when undefined is set as value - Fn

        // 2a - Verify error when string is set as value
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:"test",
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Compile) one of\nfilter.a.$scope must be of type Function (not String) or\nfilter.a.$scope must be of type Object (not String)'
        verifyResult('2a - $scope - Verify error when string is set as value',jsxlDirect(input,filter),error);


        // 2b - Verify error when string is set as value - Fn
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:(context,data,next)=>{
                    next(null,'test')
                },
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Runtime) input.a.$scope function must return a value of type Object, not String'
        verifyResult('2b - $scope - Verify error when string is set as value - Fn',jsxlDirect(input,filter),error);


        // 2c - Verify error when interger is set as value
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:5,
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Compile) one of\nfilter.a.$scope must be of type Function (not Number) or\nfilter.a.$scope must be of type Object (not Number)'
        verifyResult('2c - $scope - Verify error when interger is set as value',jsxlDirect(input,filter),error);


        // 2d - Verify error when interger is set as value - Fn
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:(context,data,next)=>{
                    next(null,5)
                },
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Runtime) input.a.$scope function must return a value of type Object, not Number'
        verifyResult('2d - $scope - Verify error when interger is set as value - Fn',jsxlDirect(input,filter),error);


        // 2e - Verify error when null is set as value
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:null,
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Compile) one of\nfilter.a.$scope must be of type Function (not null) or\nfilter.a.$scope must be of type Object (not null)'
        verifyResult('2e - $scope - Verify error when null is set as value',jsxlDirect(input,filter),error);


        // 2f - Verify error when null is set as value - Fn
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:(context,data,next)=>{
                    next(null,null)
                },
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Runtime) input.a.$scope function must return a value of type Object, not null'
        verifyResult('2f - $scope - Verify error when null is set as value - Fn',jsxlDirect(input,filter),error);


        // 2g - Verify behavior when undefined is set as value
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:undefined,
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Compile) one of\nfilter.a.$scope must be of type Function (not undefined) or\nfilter.a.$scope must be of type Object (not undefined)'
        verifyResult('2g - $scope - Verify behavior when undefined is set as value',jsxlDirect(input,filter),error);


        // 2h - Verify behavior when undefined is set as value - Fn
        input = {
            a:{
                b:1
            }
        }
        filter = {
            a:{
                $scope:(context,data,next)=>{
                    next(null,undefined)
                },
                $type:{
                    b:{
                        $transform:(context,data,next)=>{
                            next(null,context.scope)
                        }
                    }
                }
            }
        }
        error = '(Runtime) input.a.$scope function must return a value of type Object, not undefined'
        verifyResult('2h - $scope - Verify behavior when undefined is set as value - Fn',jsxlDirect(input,filter),error);

    })
})