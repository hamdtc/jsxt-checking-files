const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;


describe('In and Inc Modifier tests',()=>{

    it('$in, $nin modifier - Positive and generic error tests',()=>{

        // This test will validate the functionality of $in and $nin modifier - Which can take both an array or object as value to compare against the input
        // 1a - Verify input.a contains the any of the value in array and input.b contains any of the value in object
        // 1b - Verify input.a contains the any of the value in array and input.b contains any of the value in object - Fn
        // 1c - Verify input.a does not include any of the value in array and input.b does not include any of the value in object
        // 1d - Verify input.a does not include any of the value in array and input.b does not include any of the value in object - Fn
        // 1e - Verify error message if input doesnot include any of the values in $in array
        // 1f - Verify error message if input doesnot include any of the values in $in array - Fn
        // 1g - Verify error message if input doesnot include any of the values in $in object
        // 1h - Verify error message if input doesnot include any of the values in $in object - Fn
        // 1i - Verify error message if input contains value that is also present in $nin array
        // 1j - Verify error message if input contains value that is also present in $nin array - Fn
        // 1k - Verify error message if input contains value that is also present in $nin object
        // 1l - Verify error message if input contains value that is also present in $nin object - Fn

        // 1a - Verify input.a contains the any of the value in array and input.b contains any of the value in object
        input = {
            a:'\n',
            b:['b',['a'],0,'\n']
        }
        filter = {
            a:{
                $in:['\n',0]
            },
            b:[{
                $in:{
                    "a":1,"b":2,0:3,'\n':'newLine'
                }
            }]
        }
        output = {
            a:'\n',
            b:['b',['a'],0,'\n']
        }
        verifyResult('1a - $in - Verify input.a contains the any of the value in array and input.b contains any of the value in object',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify input.a contains the any of the value in array and input.b contains any of the value in object - Fn
        input = {
            a:null,
            b:['b',['a'],0]
        }
        filter = {
            a:{
                $in:(context,data,next)=>{
                    next(null,[null,0])
                }
            },
            b:[{
                $in:(context,data,next)=>{
                    next(null,{"a":1,"b":2,0:3})
                }
            }]
        }
        output = {
            a:null,
            b:['b',['a'],0]
        }
        verifyResult('1b - $in - Verify input.a contains the any of the value in array and input.b contains any of the value in object - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify input.a does not include any of the value in array and input.b does not include any of the value in object
        input = {
            a:Infinity,
            b:['c',['d'],1,false]
        }
        filter = {
            a:{
                $nin:[null,0]
            },
            b:[{
                $nin:{
                    "a":1,"b":2,true:0
                }
            }]
        }
        output = {
            a:Infinity,
            b:['c',['d'],1,false]
        }
        verifyResult('1c - $nin - Verify input.a does not include any of the value in array and input.b does not include any of the value in object',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify input.a does not include any of the value in array and input.b does not include any of the value in object - Fn
        input = {
            a:Infinity,
            b:['c',['d'],1,false]
        }
        filter = {
            a:{
                $nin:(context,data,next)=>{
                    next(null,[null,0])
                }
            },
            b:[{
                $nin:(context,data,next)=>{
                    next(null,{"a":1,"b":2,true:0})
                }
            }]
        }
        output = {
            a:Infinity,
            b:['c',['d'],1,false]
        }
        verifyResult('1d - $nin - Verify input.a does not include any of the value in array and input.b does not include any of the value in object - Fn',jsxlDirect(input,filter),undefined,output);

        // 1e - Verify error message if input doesnot include any of the values in $in array
        input = {
            a:5
        }
        filter = {
            a:{
                $in:[0,10]
            }
        }
        error = '(Runtime) input.a must be included in [ 0, 10 ]'
        verifyResult('1e - $in - Verify error message if input doesnot include any of the values in $in array',jsxlDirect(input,filter),error);

        // 1f - Verify error message if input doesnot include any of the values in $in array - Fn
        input = {
            a:5
        }
        filter = {
            a:{
                $in:(contet,data,next)=>{
                    next(null,[0,10])
                }
            }
        }
        error = '(Runtime) input.a must be included in [ 0, 10 ]'
        verifyResult('1f - $in - Verify error message if input doesnot include any of the values in $in array - Fn',jsxlDirect(input,filter),error);

        // 1g - Verify error message if input doesnot include any of the values in $in object
        input = {
            a:5
        }
        filter = {
            a:{
                $in:{0:'zero',10:'ten'}
            }
        }
        error = '(Runtime) input.a must be included in {\n\t"0": "zero",\n\t"10": "ten"\n}'
        verifyResult('1g - $in - Verify error message if input doesnot include any of the values in $in object',jsxlDirect(input,filter),error);

        // 1h - Verify error message if input doesnot include any of the values in $in object - Fn
        input = {
            a:5
        }
        filter = {
            a:{
                $in:(contet,data,next)=>{
                    next(null,{0:'zero',10:'ten'})
                }
            }
        }
        error = '(Runtime) input.a must be included in {\n\t"0": "zero",\n\t"10": "ten"\n}'
        verifyResult('1h - $in - Verify error message if input doesnot include any of the values in $in object - Fn',jsxlDirect(input,filter),error);

        // 1i - Verify error message if input contains value that is also present in $nin array
        input = {
            a:5
        }
        filter = {
            a:{
                $nin:[0,5]
            }
        }
        error = '(Runtime) input.a must be excluded from [ 0, 5 ]'
        verifyResult('1i - $nin - Verify error message if input contains value that is also present in $nin array',jsxlDirect(input,filter),error);

        // 1j - Verify error message if input contains value that is also present in $nin array - Fn
        input = {
            a:5
        }
        filter = {
            a:{
                $nin:(contet,data,next)=>{
                    next(null,[0,5])
                }
            }
        }
        error = '(Runtime) input.a must be excluded from [ 0, 5 ]'
        verifyResult('1j - $nin - Verify error message if input contains value that is also present in $nin array - Fn',jsxlDirect(input,filter),error);

        // 1k - Verify error message if input contains value that is also present in $nin object
        input = {
            a:10
        }
        filter = {
            a:{
                $nin:{0:'zero',10:'ten'}
            }
        }
        error = '(Runtime) input.a must be excluded from {\n\t"0": "zero",\n\t"10": "ten"\n}'
        verifyResult('1k - $in - Verify error message if input contains value that is also present in $nin object',jsxlDirect(input,filter),error);

        // 1l - Verify error message if input contains value that is also present in $nin object - Fn
        input = {
            a:10
        }
        filter = {
            a:{
                $nin:(contet,data,next)=>{
                    next(null,{0:'zero',10:'ten'})
                }
            }
        }
        error = '(Runtime) input.a must be excluded from {\n\t"0": "zero",\n\t"10": "ten"\n}'
        verifyResult('1l - $in - Verify error message if input contains value that is also present in $nin object - Fn',jsxlDirect(input,filter),error);

    })

    it('$in, $nin modifier - Pass invalid data types in filter and input',()=>{

        // This test will validate the behavior of $in modifers when an invalid data type is passed as value in filter
        // 2a - Verify error message when Function keyword is passed directly
        // 2b - Verify error message when Function keyword is passed via Function
        // 2c - Verify error message when String is passed directly
        // 2d - Verify behavior when undefined is passed directly and via function

        // 2a - Verify error message when Function keyword is passed directly
        input = {
            a:10
        }
        filter = {
            a:{
                $in:Function
            }
        }
        error = '(Runtime) input.a.$in function throws error: Unexpected identifier'
        verifyResult('2a - $in - Verify error message when Function keyword is passed directly',jsxlDirect(input,filter),error);

         // 2b - Verify error message when Function keyword is passed via Function
         input = {
            a:10
        }
        filter = {
            a:{
                $in:(context,data,next)=>{
                    next(null,Function)
                }
            }
        }
        error = '(Runtime) input.a.$in function must return a value of type [ Array, Object ], not Function'
        verifyResult('2b - $in - Verify error message when Function keyword is passed via Function',jsxlDirect(input,filter),error);

        // 2c - Verify error message when String is passed directly
        input = {
            a:'ten'
        }
        filter = {
            a:{
                $in:'ten'
            }
        }
        error = '(Compile) one of\nfilter.a.$in must be of type Function (not String),\nfilter.a.$in must be of type Array (not String), or\nfilter.a.$in must be of type Object (not String)'
        verifyResult('2c - $in - Verify error message when String is passed directly',jsxlDirect(input,filter),error);

        // 2d - Verify behavior when undefined is passed directly and via function
        // Passing undefined directly ignores the modifier, and passing undefined via function throws an error
        input = {
            a:5,
            b:10
        }
        filter = {
            a:null,
            b:{
                $in:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        error = '(Runtime) input.b.$in function must return a value of type [ Array, Object ], not undefined'
        verifyResult('2d - $in -  Verify behavior when undefined is passed directly and via function',jsxlDirect(input,filter),error);


    })

    it('$in, $nin modifier - Use with other modifiers',()=>{

        // This test will validate the behavior of $in and $nin modifiers while used alongside other modifiers
        // 3a - Verify the $in and $nin validations occur after being modified by insert, default and map
        // 3b - Verify the $transform modifier doesnot supress the error message from $in modifier

        // 3a - Verify the $in and $nin validations occur after being modified by insert, default and map
        input = {
            a:5,
            c:1
        }
        filter = {
            a:{
                $insert:10,
                $in:[0,10],
                $nin:[5]
            },
            b:{
                $default:null,
                $in:(context,data,next)=>{
                    next(null,[null,0])
                },
                $nin:(context,data,next)=>{
                    next(null,[undefined])
                }
            },
            c:{
                $map:['zero','one'],
                $in:{'one':1},
                $nin:{1:'one'}
            }
        }
        output = { 
            a: 10, 
            b: null, 
            c: 'one' 
        }
        verifyResult('3a - $in -  Verify the $in and $nin validations occur after being modified by insert, default and map',jsxlDirect(input,filter),undefined,output);

        // 3b - Verify the $transform modifier doesnot supress the error message from $in modifier
        input = {
            a:5
        }
        filter = {
            a:{
                $in:[0,10],
                $nin:[5],
                $transform:(context,data,next)=>{
                    next(null,'transformedValue')
                }
            }
        }
        error = '(Runtime) input.a must be included in [ 0, 10 ]'
        verifyResult('3b - $in - Verify the $transform modifier doesnot supress the error message from $in modifier',jsxlDirect(input,filter),error);

    })

    ///// $inc and $ninc

    it('$inc and $ninc modifiers - Positive and generic error tests',()=>{

        // This test will validate the functionality of $inc and $ninc modifiers - these are the opposite of $in and $nin - here the input is an object or array which should include any of the value specified in filter
        // 4a - Verify the $inc and $ninc modifiers validates as expected for both array and object as input
        // 4b - Verify the $inc and $ninc modifiers validates as expected for both array and object as input - Fn
        // 4c - Verify error from $inc modifer when the validation fails
        // 4d - Verify error from $inc modifer when the validation fails - Fn
        // 4e - Verify error from $ninc modifer when the validation fails
        // 4f - Verify error from $ninc modifer when the validation fails - Fn

        // 4a - Verify the $inc and $ninc modifiers validates as expected for both array and object as input
        input = {
            a:[0,null,[5],new Date().getDate()],
            b:{0:'zero',null:'null',[5]:'array'}
        }
        filter = {
            a:{
                $inc:new Date().getDate(),
                $ninc:1
            },
            b:{
                $inc:5,
                $ninc:1
            }
        }
        output = {
            a:[0,null,[5],new Date().getDate()],
            b:{0:'zero',null:'null',[5]:'array'}
        }
        verifyResult('4a - $inc $ninc - Verify the $inc and $ninc modifiers validates as expected for both array and object as input',jsxlDirect(input,filter),undefined,output);
        
        // 4b - Verify the $inc and $ninc modifiers validates as expected for both array and object as input - Fn
        // Bug - while comparing string the number is ignored hence this test will fail
        input = {
            a:[0,null,[5],new Date().getDate(),'test'],
            b:{0:'zero',[5]:'array',null:'null'}
        }
        filter = {
            a:{
                $inc:(context,data,next)=>{
                    next(null,new Date().getDate())
                },
                $ninc:(context,data,next)=>{
                    next(null,'test1')
                }
            },
            b:{
                $inc:(context,data,next)=>{
                    next(null,5)
                },
                $ninc:(context,data,next)=>{
                    next(null,1)
                }
            }
        }
        output = {
            a:[0,null,[5],new Date().getDate(),'test'],
            b:{0:'zero',[5]:'array',null:'null'}
        }
        verifyResult('4b -$inc $ninc - Verify the $inc and $ninc modifiers validates as expected for both array and object as input - Fn',jsxlDirect(input,filter),undefined,output);

        // 4c - Verify error from $inc modifer when the validation fails
        input = {
            a:[0,null,[5],new Date().getDay()],
        }
        filter = {
            a:{
                $inc:8,
            }
        }
        error = '(Runtime) input.a must include 8'
        verifyResult('4c - $inc - Verify error from $inc modifer when the validation fails',jsxlDirect(input,filter),error);

        // 4d - Verify error from $inc modifer when the validation fails - Fn
        input = {
            a:{0:'zero',null:'null'},
        }
        filter = {
            a:{
                $inc:(context,data,next)=>{
                    next(null,1)
                }
            }
        }
        error = '(Runtime) input.a must include 1'
        verifyResult('4d - $inc - Verify error from $inc modifer when the validation fails - Fn',jsxlDirect(input,filter),error);


        // 4e - Verify error from $ninc modifer when the validation fails
        input = {
            a:[0,null,[5],1],
        }
        filter = {
            a:{
                $ninc:1
            }
        }
        error = '(Runtime) input.a must exclude 1'
        verifyResult('4e - $ninc - Verify error from $ninc modifer when the validation fails',jsxlDirect(input,filter),error);


        // 4f - Verify error from $ninc modifer when the validation fails - Fn
        input = {
            a:{0:'zero',null:'null'},
        }
        filter = {
            a:{
                $ninc:(context,data,next)=>{
                    next(null,'null')
                }
            }
        }
        error = '(Runtime) input.a must exclude "null"'
        verifyResult('4f - $inc - Verify error from $ninc modifer when the validation fails - Fn',jsxlDirect(input,filter),error);

    })

    it('$inc and $ninc modifiers - Pass invalid data types and verify errors',()=>{

        // This test will validate the errors throws when invalid data is passed to $inc and $ninc modifiers through filters and input
        // 5a - Verify behavior when passing new line operator via filter - Fn
        // 5b - Verify error when Function keyword is passed directly via Filter
        // 5c - Verify error when Function keyword is passed via Filter - Fn
        // 5d - Verify error when Array is passed directly via filter
        // 5e - Verify error when Array is passed via filter - Fn
        // 5f - Verify behavior when input is Number
        // 5g - Verify behavior when input is string - Fn


        // 5a - Verify behavior when passing new line operator via filter - Fn
        input = {
            a:{0:'zero',null:'null','\n':'newLine'},
        }
        filter = {
            a:{
                $inc:(context,data,next)=>{
                    next(null,'\n')
                }
            }
        }
        output = {
            a:{0:'zero',null:'null','\n':'newLine'},
        }
        verifyResult('5a - $inc - Verify behavior when passing new line operator via filter - Fn',jsxlDirect(input,filter),undefined,output);

        // 5b - Verify error when Function keyword is passed directly via Filter
        input = {
            a:{0:'zero',null:'null','\n':'newLine'},
        }
        filter = {
            a:{
                $inc:Function
            }
        }
        error = '(Runtime) input.a.$inc function throws error: Unexpected identifier'
        verifyResult('5b - $inc - Verify error when Function keyword is passed directly via Filter',jsxlDirect(input,filter),error);

        // 5c - Verify error when Function keyword is passed via Filter - Fn
        input = {
            a:{0:'zero',null:'null','\n':'newLine'},
        }
        filter = {
            a:{
                $ninc:(context,data,next)=>{
                    next(null,Function)
                }
            }
        }
        error = '(Runtime) input.a.$ninc function must return a value of type [ Boolean, Number, String, RegExp, Date ], not Function'
        verifyResult('5c - $ninc - Verify error when Function keyword is passed via Filter - Fn',jsxlDirect(input,filter),error);

        // 5d - Verify error when Array is passed directly via filter
        input = {
            a:[0,null]
        }
        filter = {
            a:{
                $inc:[0,null]
            }
        }
        error = '(Compile) one of\nfilter.a.$inc must be of type Function (not Array),\nfilter.a.$inc must be of type Boolean (not Array),\nfilter.a.$inc must be of type Number (not Array),\nfilter.a.$inc must be of type String (not Array),\nfilter.a.$inc must be of type RegExp (not Array), or\nfilter.a.$inc must be of type Date (not Array)'
        verifyResult('5d - $inc - Verify error when Array is passed directly via filter',jsxlDirect(input,filter),error);


        // 5e - Verify error when Array is passed via filter - Fn
        input = {
            a:[0,null]
        }
        filter = {
            a:{
                $ninc:(context,data,next)=>{
                    next(null,[0,null])
                }
            }
        }
        error = '(Runtime) input.a.$ninc function must return a value of type [ Boolean, Number, String, RegExp, Date ], not Array'
        verifyResult('5e - $ninc - Verify error when Array is passed via filter - Fn',jsxlDirect(input,filter),error);


        // 5f - Verify behavior when input is Number
        input = {
            a:Infinity
        }
        filter = {
            a:{
                $inc:Infinity
            }
        }
        output = {
            a:Infinity
        }
        verifyResult('5f - $inc - Verify behavior when input is Number',jsxlDirect(input,filter),undefined,output);

        // Bug - while comparing string the number is ignored hence this test will fail
        // 5g - Verify behavior when input is string - Fn
        input = {
            a:'test'
        }
        filter = {
            a:{
                $ninc:(context,data,next)=>{
                    next(null,'test1')
                }
            }
        }
        output = {
            a:'test'
        }
        verifyResult('5g - $ninc - Verify behavior when input is string - Fn',jsxlDirect(input,filter),undefined,output);

    })

    it('$inc and $ninc modifiers - Use with other modifiers',()=>{

        // This test will validate the behavior of $inc and $ninc modifier with other modifiers
        // 6a - Verify behavior when used along with $insert and $default
        // 6b - Verify behavior when used along with $rename


        // 6a - Verify behavior when used along with $insert and $default
        input = {
            a:'test',
        }
        filter = {
            a:{
                $insert:['InsertedValue'],
                $inc:(context,data,next)=>{
                    next(null,'InsertedValue')
                }
            },
            b:{
                $default:[1],
                $inc:1
            }
        }
        output = {
            a:['InsertedValue'],
            b:[1]
        }
        verifyResult('6a - $inc - Verify behavior when used along with $insert and $default',jsxlDirect(input,filter),undefined,output);

        // 6b - Verify behavior when used along with $rename
        input = {
            a:'test',
        }
        filter = {
            $type:{
                a:{
                    $rename:'c'
                }
            },
            $ninc:'a'
        }
        output = {
            c:'test'
        }
        verifyResult('6b - $ninc - Verify behavior when used along with $rename',jsxlDirect(input,filter),undefined,output);

    })
})