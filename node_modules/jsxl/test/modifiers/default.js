const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Default modifier tests',()=>{

    it('Default modifier - positive and generic error tests',()=>{

        // This test will verify expected errors and output with valid input and filter
        // 1a - Verify $default does not override if valid value is already present in Input
        // 1b - Verify $default does not override if valid value is already present in Input - Fn
        // 1c - Verify $default values are inserted if the input is undefined
        // 1d - Verify behavior if $default value itself is set to undefined
        // 1e - Verify output if $default value is set to null
        // 1f - Verify output if $default value is set to \n

        
        // 1a - Verify $default does not override if valid value is already present in Input
        input = {
            a:5
        },
        filter = {
            a:{
                $default:'defaultValue'
            }
        }
        output = {
            a:5
        }
        verifyResult('1a - Default - Default doesnot work if value already present',jsxlDirect(input,filter),undefined,output);

        // 1b - Verify $default does not override if valid value is already present in Input - Fn
        input = {
            a:5
        },
        filter = {
            a:{
                $default:(context,data,next)=>{
                    next(null,'defaultValue')
                }
            }
        }
        output = {
            a:5
        }
        verifyResult('1b - Default - Default doesnot work if value already present - Fn',jsxlDirect(input,filter),undefined,output);

        // 1c - Verify $default values are inserted if the input is undefined
        input = {
        },
        filter = {
            a:{
                $default:'defaultValueA'
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,'defaultValueB')
                }
            }
        }
        output = {
            a:'defaultValueA',
            b:'defaultValueB'
        }
        verifyResult('1c - Default - Verify $default values are inserted if the input is undefined',jsxlDirect(input,filter),undefined,output);

        // 1d - Verify behavior if $default value in filter itself is set to undefined
        input = {},
        filter = {
            a:{
                $default:undefined
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,undefined)
                }
            }
        }
        output = {
            a:undefined,
            b:undefined
        }
        verifyResult('1d - Default - Verify behavior if $default value itself is set to undefined',jsxlDirect(input,filter),undefined,output);

        // 1e - Verify output if $default value is set to null
        input = {},
        filter = {
            a:{
                $default:null
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,null)
                }
            }
        }
        output = {
            a:null,
            b:null
        }
        verifyResult('1e - Default - Verify output if $default value is set to null',jsxlDirect(input,filter),undefined,output);
        
        // 1f - Verify output if $default value is set to \n
        input = {},
        filter = {
            a:{
                $default:'\n'
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,'\n')
                }
            }
        }
        output = {
            a:'\n',
            b:'\n'
        }
        verifyResult('1f - Default - Verify output if $default value is set to new line operator',jsxlDirect(input,filter),undefined,output);

    })

    it('Default modifier - Verify behavior with other modifiers',()=>{

        // This tests will verify the behavior of $default with other modifiers
        // 2a - Verify $transform overwrites $default
        // 2b - Use $default along with $type when valid input is present
        // 2c - Use $default along with $type when no valid input is present
        // 2d - Verify behavior when using $default along with $remove
        // 2e - Verify error message when using $default along with $insert


        // 2a - Verify $transform overwrites $default
        input = {},
        filter = {
            a:{
                $default:'deafaultA',
                $transform:(contet,data,next)=>{
                    next(null,'transformA')
                }
            },
            b:{
                $default:(context,data,next)=>{
                    next(null,'defaultB')
                },
                $transform:(contet,data,next)=>{
                    next(null,'transformB')
                }
            }
        }
        output = {
            a:'transformA',
            b:'transformB'
        }
        verifyResult('2a - Default - Verify $transform overwrites $default',jsxlDirect(input,filter),undefined,output);

        // 2b - Use $default along with $type when valid input is present
        input = {
            a:5,
            b:'test'
        },
        filter = {
            a:{
                $type:Number,
                $default:'deafaultA'
            },
            b:{
                $type:String,
                $default:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        output = {
            a:5,
            b:'test'
        }
        verifyResult('2b - Default - Use $default along with $type when valid input is present',jsxlDirect(input,filter),undefined,output);

        // 2c - Use $default along with $type when no valid input is present
        input = {
        },
        filter = {
            a:{
                $type:String,
                $default:'deafaultA'
            },
            b:{
                $type:Number,
                $default:(context,data,next)=>{
                    next(null,10)
                }
            }
        }
        output = {
            a:'deafaultA',
            b:10
        }
        verifyResult('2c - Default - Use $default along with $type when no valid input is present',jsxlDirect(input,filter),undefined,output);

        // 2d - Verify behavior when using $default along with $remove
        input = {
            a:undefined,
        },
        filter = {
            a:{
                $default:'deafaultA',
                $remove:true,
            }
        }
        output = {}
        verifyResult('2d - Default - Verify behavior when using $default along with $remove',jsxlDirect(input,filter),undefined,output);

        // 2e - Verify error message when using $default along with $insert
        input = {
            a:undefined,
        },
        filter = {
            a:{
                $default:'deafaultA',
                $insert:'insertA',
            }
        }
        error = '(Compile) filter.a.$type holds multiple of $insert, $default, or $optional modifiers'
        verifyResult('2e - Verify error message when using $default along with $insert',jsxlDirect(input,filter),error);
    })

})