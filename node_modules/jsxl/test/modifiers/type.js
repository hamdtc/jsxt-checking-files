const { verifyResult, jsxlDirect } = require('../jsxlfunction');
let input, filter, error, output;

describe('Type Modifier Tests',()=>{


    it('Type modifier - Positive and generic error tests for $type String',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as String verify error if other datatype are passed
        // 1a - Verify no errors occur when string is passed in input for $type:String
        // 1b - Verify error if number is passed in input for $type:String
        // 1c - Verify error if boolean is passed in input for $type:String
        // 1d - Verify error if function is passed in input for $type:String
        // 1e - Verify error if array is passed in input for $type:String
        // 1f - Verify error if object is passed in input for $type:String
        // 1g - Verify error if null is passed in input for $type:String

        // 1a - Verify no errors occur when string is passed in input for $type:String
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:String
            }
        }
        output = { 
            a:'test'
        }
        verifyResult('1a - $type - Verify no errors occur when string is passed in input for $type:String',jsxlDirect(input,filter),undefined,output); 

        // 1b - Verify error if number is passed in input for $type:String
        input = {
            a:5
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not Number)'
        verifyResult('1b - $type - Verify error if number is passed in input for $type:String',jsxlDirect(input,filter),error); 

        // 1c - Verify error if boolean is passed in input for $type:String
        input = {
            a:false
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not Boolean)'
        verifyResult('1c - $type - Verify error if boolean is passed in input for $type:String',jsxlDirect(input,filter),error); 

        // 1d - Verify error if function is passed in input for $type:String
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not Function)'
        verifyResult('1d - $type - Verify error if function is passed in input for $type:String',jsxlDirect(input,filter),error); 

        // 1e - Verify error if array is passed in input for $type:String
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not Array)'
        verifyResult('1e - $type - Verify error if array is passed in input for $type:String',jsxlDirect(input,filter),error); 

        // 1f - Verify error if object is passed in input for $type:String
        input = {
            a:{'a':1,'b':2}
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not Object)'
        verifyResult('1f - $type - Verify error if Object is passed in input for $type:String',jsxlDirect(input,filter),error); 

        // 1g - Verify error if null is passed in input for $type:String
        input = {
            a:null
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be of type String (not null)'
        verifyResult('1g - $type - Verify error if null is passed in input for $type:String',jsxlDirect(input,filter),error); 

    })

    it('Type modifier - Positive and generic error tests for $type Number',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as Number verify error if other datatype are passed
        // 2a - Verify no errors occur when Number is passed in input for $type:Number
        // 2b - Verify error if String is passed in input for $type:Number
        // 2c - Verify error if boolean is passed in input for $type:Number
        // 2d - Verify error if function is passed in input for $type:Number
        // 2e - Verify error if array is passed in input for $type:Number
        // 2f - Verify error if object is passed in input for $type:Number
        // 2g - Verify error if null is passed in input for $type:Number

        // 2a - Verify no errors occur when Number is passed in input for $type:Number
        input = {
            a:5
        }
        filter = {
            a:{
                $type:Number
            }
        }
        output = { 
            a:5
        }
        verifyResult('2a - $type - Verify no errors occur when string is passed in input for $type:Number',jsxlDirect(input,filter),undefined,output); 

        // 2b - Verify error if String is passed in input for $type:Number
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not String)'
        verifyResult('2b - $type - Verify error if number is passed in input for $type:Number',jsxlDirect(input,filter),error); 

        // 2c - Verify error if boolean is passed in input for $type:Number
        input = {
            a:false
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not Boolean)'
        verifyResult('2c - $type - Verify error if boolean is passed in input for $type:Number',jsxlDirect(input,filter),error); 

        // 2d - Verify error if function is passed in input for $type:Number
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not Function)'
        verifyResult('2d - $type - Verify error if function is passed in input for $type:Number',jsxlDirect(input,filter),error); 

        // 2e - Verify error if array is passed in input for $type:Number
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not Array)'
        verifyResult('2e - $type - Verify error if array is passed in input for $type:Number',jsxlDirect(input,filter),error); 

        // 2f - Verify error if object is passed in input for $type:Number
        input = {
            a:{'a':1,'b':2}
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not Object)'
        verifyResult('2f - $type - Verify error if Object is passed in input for $type:Number',jsxlDirect(input,filter),error); 

        // 2g - Verify error if null is passed in input for $type:Number
        input = {
            a:null
        }
        filter = {
            a:{
                $type:Number
            }
        }
        error = '(Runtime) input.a must be of type Number (not null)'
        verifyResult('2g - $type - Verify error if null is passed in input for $type:Number',jsxlDirect(input,filter),error); 


    })

    it('Type modifier - Positive and generic error tests for $type Boolean',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as Boolean verify error if other datatype are passed
        // 3a - Verify no errors occur when Boolean is passed in input for $type:Boolean
        // 3b - Verify error if String is passed in input for $type:Boolean
        // 3c - Verify error if boolean is passed in input for $type:Boolean
        // 3d - Verify error if function is passed in input for $type:Boolean
        // 3e - Verify error if array is passed in input for $type:Boolean
        // 3f - Verify error if object is passed in input for $type:Boolean
        // 3g - Verify error if null is passed in input for $type:Boolean

        // 3a - Verify no errors occur when Boolean is passed in input for $type:Boolean
        input = {
            a:true
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        output = { 
            a:true
        }
        verifyResult('3a - $type - Verify no errors occur when Boolean is passed in input for $type:Boolean',jsxlDirect(input,filter),undefined,output); 

        // 3b - Verify error if String is passed in input for $type:Boolean
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not String)'
        verifyResult('3b - $type - Verify error if string is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

        // 3c - Verify error if String is passed in input for $type:Boolean
        input = {
            a:'false'
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not String)'
        verifyResult('3c - $type - Verify error if String is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

        // 3d - Verify error if function is passed in input for $type:Boolean
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not Function)'
        verifyResult('3d - $type - Verify error if function is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

        // 3e - Verify error if array is passed in input for $type:Boolean
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not Array)'
        verifyResult('3e - $type - Verify error if array is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

        // 3f - Verify error if object is passed in input for $type:Boolean
        input = {
            a:{'a':1,'b':2}
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not Object)'
        verifyResult('3f - $type - Verify error if Object is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

        // 3g - Verify error if null is passed in input for $type:Boolean
        input = {
            a:null
        }
        filter = {
            a:{
                $type:Boolean
            }
        }
        error = '(Runtime) input.a must be of type Boolean (not null)'
        verifyResult('3g - $type - Verify error if null is passed in input for $type:Boolean',jsxlDirect(input,filter),error); 

    })

    it('Type modifier - Positive and generic error tests for $type Function',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as Function verify error if other datatype are passed
        // 4a - Verify no errors occur when Function is passed in input for $type:Function
        // 4b - Verify error if String is passed in input for $type:Function
        // 4c - Verify error if boolean is passed in input for $type:Function
        // 4d - Verify error if Number is passed in input for $type:Function
        // 4e - Verify error if array is passed in input for $type:Function
        // 4f - Verify error if object is passed in input for $type:Function
        // 4g - Verify error if null is passed in input for $type:Function

        // 4a - Verify no errors occur when Function is passed in input for $type:Function
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:Function
            }
        }
        output = { 
            a:Function
        }
        verifyResult('4a - $type - Verify no errors occur when Function is passed in input for $type:Function',jsxlDirect(input,filter),undefined,output); 

        // 4b - Verify error if String is passed in input for $type:Function
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not String)'
        verifyResult('4b - $type - Verify error if string is passed in input for $type:Function',jsxlDirect(input,filter),error); 

        // 4c - Verify error if Boolean is passed in input for $type:Function
        input = {
            a:false
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not Boolean)'
        verifyResult('4c - $type - Verify error if Boolean is passed in input for $type:Function',jsxlDirect(input,filter),error); 

        // 4d - Verify error if Number is passed in input for $type:Function
        input = {
            a:5
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not Number)'
        verifyResult('4d - $type - Verify error if Number is passed in input for $type:Function',jsxlDirect(input,filter),error); 

        // 4e - Verify error if array is passed in input for $type:Function
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not Array)'
        verifyResult('4e - $type - Verify error if array is passed in input for $type:Function',jsxlDirect(input,filter),error); 

        // 4f - Verify error if object is passed in input for $type:Function
        input = {
            a:{'a':1,'b':2}
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not Object)'
        verifyResult('4f - $type - Verify error if Object is passed in input for $type:Function',jsxlDirect(input,filter),error); 

        // 4g - Verify error if null is passed in input for $type:Function
        input = {
            a:null
        }
        filter = {
            a:{
                $type:Function
            }
        }
        error = '(Runtime) input.a must be of type Function (not null)'
        verifyResult('4g - $type - Verify error if null is passed in input for $type:Function',jsxlDirect(input,filter),error); 
    })

    it('Type modifier - Positive and generic error tests for $type Array',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as Array verify error if other datatype are passed
        // 5a - Verify no errors occur when Array is passed in input for $type:Array
        // 5b - Verify error if String is passed in input for $type:Array
        // 5c - Verify error if boolean is passed in input for $type:Array
        // 5d - Verify error if Number is passed in input for $type:Array
        // 5e - Verify error if Function is passed in input for $type:Array
        // 5f - Verify error if object is passed in input for $type:Array
        // 5g - Verify error if null is passed in input for $type:Array

        // 5a - Verify no errors occur when Array is passed in input for $type:Array
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:Array
            }
        }
        output = { 
            a:[1,2]
        }
        verifyResult('5a - $type - Verify no errors occur when Array is passed in input for $type:Array',jsxlDirect(input,filter),undefined,output); 

        // 5b - Verify error if String is passed in input for $type:Array
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not String)'
        verifyResult('4b - $type - Verify error if string is passed in input for $type:Array',jsxlDirect(input,filter),error); 

        // 5c - Verify error if Boolean is passed in input for $type:Array
        input = {
            a:false
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not Boolean)'
        verifyResult('4c - $type - Verify error if Boolean is passed in input for $type:Array',jsxlDirect(input,filter),error); 

        // 5d - Verify error if Number is passed in input for $type:Array
        input = {
            a:5
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not Number)'
        verifyResult('5d - $type - Verify error if Number is passed in input for $type:Array',jsxlDirect(input,filter),error); 

        // 5e - Verify error if Function is passed in input for $type:Array
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not Function)'
        verifyResult('5e - $type - Verify error if Function is passed in input for $type:Array',jsxlDirect(input,filter),error); 

        // 5f - Verify error if object is passed in input for $type:Array
        input = {
            a:{'a':1,'b':2}
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not Object)'
        verifyResult('5f - $type - Verify error if Object is passed in input for $type:Array',jsxlDirect(input,filter),error); 

        // 5g - Verify error if null is passed in input for $type:Array
        input = {
            a:null
        }
        filter = {
            a:{
                $type:Array
            }
        }
        error = '(Runtime) input.a must be of type Array (not null)'
        verifyResult('5g - $type - Verify error if null is passed in input for $type:Array',jsxlDirect(input,filter),error); 

    })

    it('Type modifier - Positive and generic error tests for $type Object',()=>{

        // This test will validate the functionality of $type modifier - When is $type is defined as Object verify error if other datatype are passed
        // 6a - Verify no errors occur when Object is passed in input for $type:Object
        // 6b - Verify error if String is passed in input for $type:Object
        // 6c - Verify error if boolean is passed in input for $type:Object
        // 6d - Verify error if Number is passed in input for $type:Object
        // 6e - Verify error if Function is passed in input for $type:Object
        // 6f - Verify error if Array is passed in input for $type:Object
        // 6g - Verify error if null is passed in input for $type:Object

        // 6a - Verify no errors occur when Object is passed in input for $type:Object
        input = {
            a:{a:1,b:2}
        }
        filter = {
            a:{
                $type:Object
            }
        }
        output = { 
            a:{a:1,b:2}
        }
        verifyResult('6a - $type - Verify no errors occur when Object is passed in input for $type:Object',jsxlDirect(input,filter),undefined,output); 

        // 6b - Verify error if String is passed in input for $type:Object
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not String)'
        verifyResult('6b - $type - Verify error if string is passed in input for $type:Object',jsxlDirect(input,filter),error); 

        // 6c - Verify error if Boolean is passed in input for $type:Object
        input = {
            a:false
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not Boolean)'
        verifyResult('6c - $type - Verify error if Boolean is passed in input for $type:Object',jsxlDirect(input,filter),error); 

        // 6d - Verify error if Number is passed in input for $type:Object
        input = {
            a:5
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not Number)'
        verifyResult('6d - $type - Verify error if Number is passed in input for $type:Object',jsxlDirect(input,filter),error); 

        // 6e - Verify error if Function is passed in input for $type:Object
        input = {
            a:Function
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not Function)'
        verifyResult('6e - $type - Verify error if Function is passed in input for $type:Object',jsxlDirect(input,filter),error); 

        // 6f - Verify error if Array is passed in input for $type:Object
        input = {
            a:[1,2]
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not Array)'
        verifyResult('6f - $type - Verify error if Array is passed in input for $type:Object',jsxlDirect(input,filter),error); 

        // 6g - Verify error if null is passed in input for $type:Object
        input = {
            a:null
        }
        filter = {
            a:{
                $type:Object
            }
        }
        error = '(Runtime) input.a must be of type Object (not null)'
        verifyResult('6g - $type - Verify error if null is passed in input for $type:Object',jsxlDirect(input,filter),error); 

    })


    it('Type modifier - Verify behavior when input or filter is undefined',()=>{

        // 7a - Verify behavior when input is undefined
        // 7b - Verify behavior when filter is undefined
        // 7c - Verify behaior when function is passed as value to filter

        // 7a - Verify behavior when input is undefined
        input = {
        }
        filter = {
            a:{
                $type:String
            }
        }
        error = '(Runtime) input.a must be provided'
        verifyResult('7a - $type - Verify behavior when input is undefined',jsxlDirect(input,filter),error); 

        // 7b - Verify behavior when filter is undefined
        input = {
            a:'test'
        }
        filter = {
            a:{
            }
        }
        error = '(Runtime) input.a must be like type Object (not String)'
        verifyResult('7b - $type - Verify behavior when filter is undefined',jsxlDirect(input,filter),error); 

        // 7c - Verify behaior when function is passed as value to filter
        input = {
            a:'test'
        }
        filter = {
            a:{
                $type:(context,data,next)=>{
                    next(null,String)
                }
            }
        }
        error = '(Runtime) input.a must be of type $type (not String)'
        verifyResult('7c - $type - Verify behaior when function is passed as value to filter',jsxlDirect(input,filter),error); 

    })
})